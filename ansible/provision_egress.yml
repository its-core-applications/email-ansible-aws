---

- include: task_find_ami.yml
  vars:
    launch_class: egress

- hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - name: Gather VPC subnet facts
      ec2_vpc_subnet_facts:
        region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ aws_vpc }}"
      register: ec2_subnets

    - name: Create egress
      ec2:
        group: [ main-default, egress, redis ]
        key_name: "{{ aws_ssh_key }}"
        instance_type: m4.large
        region: "{{ aws_region }}"
        zone: "{{ item.availability_zone }}"
        image: "{{ find_ami.results.0.ami_id }}"
        instance_profile_name: standard
        instance_tags:
          Class: egress
          az: "{{ item.availability_zone }}"
        exact_count: 1
        count_tag:
          Class: egress
          az: "{{ item.availability_zone }}"
      with_items: "{{ ec2_subnets.subnets }}"
      register: ec2

- include: task_wait_for_launched.yml

- hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - name: Assign elastic IP
      # This is ugly, fragile, and limits us to one egress host per az
      ec2_eip:
        region: "{{ aws_region }}"
        device_id: "{{ hostvars[item]['ec2_id'] }}"
        ip: "{{ egress_eip[ hostvars[item]['ec2_placement'] ] }}"
      with_items: "{{ groups.tag_Class_egress }}"
      register: eip

    - name: Wait for elastic IPs
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        search_regex: OpenSSH
      with_items: "{{ eip.results }}"

- include: task_dns_egress.yml
