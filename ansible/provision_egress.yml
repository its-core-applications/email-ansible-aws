---

- hosts: localhost
  become: false
  tasks:
    - import_tasks: task_find_ami.yml
      vars:
        launch_class: egress

    - import_tasks: task_find_subnets.yml

    - name: Create egress
      ec2:
        group: [ main-default, egress, redis ]
        key_name: "{{ aws_ssh_key }}"
        instance_type: m5.2xlarge
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ item.id }}"
        assign_public_ip: true
        image: "{{ find_ami.image_id }}"
        instance_profile_name: standard
        instance_tags:
          Class: egress
          Status: spinup
          redis: 'yes'
        count: 1
      when: groups.Class_egress | default([]) | intersect(groups.Status_production | default([]) | union(groups.Status_spinup | default([]))) | intersect(groups[item.availability_zone] | default([])) | length == 0
      loop: "{{ ec2_subnets_sorted }}"
      register: ec2

    - import_tasks: task_wait_for_launched.yml

    - import_role:
         name: redis_master
      tags: redis

    - import_tasks: task_dns_redis.yml

- hosts: Class_egress:&Status_spinup
  become: false
  tasks:
    - name: Assign elastic IP
      delegate_to: localhost
      # This is ugly, fragile, and limits us to one egress host per az
      ec2_eip:
        region: "{{ aws_region }}"
        device_id: "{{ instance_id }}"
        ip: "{{ egress_eip[placement.availability_zone | replace('-', '_')] }}"
      register: eip

    - name: Wait for elastic IP
      delegate_to: localhost
      wait_for:
        host: "{{ eip.public_ip }}"
        port: 22
        search_regex: OpenSSH

    - name: Set status to production
      ec2_tag:
        region: "{{ aws_region }}"
        resource: "{{ instance_id }}"
        tags:
          Status: production

- hosts: localhost
  become: false
  tasks:
    - meta: refresh_inventory

    - import_tasks: task_dns_egress.yml

    - import_role:
        name: sensu_proxyclients
      tags: sensu
