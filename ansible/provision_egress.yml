---

- hosts: localhost
  become: false
  tasks:
    - import_tasks: task_find_ami.yml
      vars:
        launch_class: egress

    - import_tasks: task_find_subnets.yml

    - name: Create egress
      ec2:
        group:
          - main-default
          - egress
          - redis
        key_name: "{{ aws_ssh_key }}"
        instance_type: m5.2xlarge
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ item.id }}"
        assign_public_ip: true
        image: "{{ find_ami.image_id }}"
        instance_profile_name: standard
        instance_tags:
          Class: egress
          Status: spinup
          redis: 'yes'
        count: 1
      when: groups.Class_egress | default([]) | intersect(groups.Status_production | default([]) | intersect(aws_region_group) | union(groups.Status_spinup | default([]))) | intersect(groups['az_' ~ item.availability_zone | replace('-', '_')] | default([])) | length == 0
      loop: "{{ ec2_subnets_sorted }}"
      register: ec2

    - import_tasks: task_wait_for_launched.yml

- hosts: Class_egress:&Status_spinup
  tasks:
    - delegate_to: localhost
      become: false
      block:
        - name: Assign elastic IP
          # This is ugly, fragile, and limits us to one egress host per az
          ec2_eip:
            region: "{{ region }}"
            device_id: "{{ instance_id }}"
            ip: "{{ egress_eip[aws_status][placement.availability_zone] }}"
          register: result

        - name: Wait for elastic IP
          wait_for:
            host: "{{ result.public_ip }}"
            port: 22
            search_regex: OpenSSH

        - name: Set status to production
          ec2_tag:
            region: "{{ region }}"
            resource: "{{ instance_id }}"
            tags:
              Status: production

- hosts: localhost
  become: false
  tasks:
    - meta: refresh_inventory

    - import_role:
        name: route53_dns_from_inventory
      vars:
        dns_host: egress
        dns_group: Class_egress

    - import_role:
         name: redis_master
      tags: redis

    - import_role:
        name: route53_dns_from_inventory
      vars:
        dns_host: pink
        dns_group: redis

    - import_role:
        name: sensu_proxyclients
      tags: sensu
