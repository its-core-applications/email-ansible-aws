---

- hosts: localhost
  become: false
  tasks:
    - import_role:
        name: ec2_find_subnets

    - include_role:
        name: ec2_launch
      vars:
        launch_class: egress
        launch_count: 1
        launch_groups:
          - egress
          - redis
        launch_tags:
          redis: 'yes'
      when: groups.Class_egress | default([]) | intersect(groups.Status_production | default([]) | union(groups.Status_spinup | default([]))) | intersect(groups['az_' ~ launch_subnet.availability_zone | replace('-', '_')] | default([])) | length == 0
      loop: "{{ ec2_subnets_public }}"
      loop_control:
        loop_var: launch_subnet

- hosts: Class_egress:&Status_spinup
  tasks:
    - when: region == aws_region
      delegate_to: localhost
      become: false
      block:
        - name: Assign elastic IP
          # This is ugly, fragile, and limits us to one egress host per az
          ec2_eip:
            region: "{{ region }}"
            profile: "{{ aws_profile[aws_status][region] }}"
            device_id: "{{ instance_id }}"
            ip: "{{ egress_eip[aws_status][placement.availability_zone] }}"
          register: result

        - name: Wait for elastic IP
          wait_for:
            host: "{{ result.public_ip }}"
            port: 22
            search_regex: OpenSSH

        - name: Set status to production
          ec2_tag:
            region: "{{ region }}"
            profile: "{{ aws_profile[aws_status][region] }}"
            resource: "{{ instance_id }}"
            tags:
              Status: production

- hosts: localhost
  become: false
  tasks:
    - meta: refresh_inventory

    - import_role:
        name: route53_dns_from_inventory
      vars:
        dns_host: egress
        dns_group: Class_egress

    - import_role:
         name: redis_master
      tags: redis

    - import_role:
        name: route53_dns_from_inventory
      vars:
        dns_host: pink
        dns_group: redis

    - import_role:
        name: sensu_proxyclients
      tags: sensu
