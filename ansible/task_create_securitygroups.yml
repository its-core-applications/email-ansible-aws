---

- hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - name: Create default security group
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        name: main-default
        description: default VPC security group
        rules:
          - proto: icmp
            from_port: -1
            to_port: -1
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: udp
            from_port: 60000
            to_port: 61000
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create VPN default security group
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpn_vpc }}"
        name: vpn-default
        description: default VPC security group
        rules:
          - proto: icmp
            from_port: -1
            to_port: -1
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: udp
            from_port: 60000
            to_port: 61000
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create security group for mx ELB
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        name: mx-elb
        description: mx ELB
        rules:
          - proto: tcp
            from_port: 25
            to_port: 25
            cidr_ip: 0.0.0.0/0
          - proto: icmp
            from_port: -1
            to_port: -1
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create security group for mx
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        name: mx
        description: mx hosts
        rules:
          - proto: tcp
            from_port: 25
            to_port: 25
            group_name: mx-elb

    - name: Create security group for egress
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        name: egress
        description: egress hosts
        rules:
          - proto: tcp
            from_port: 25
            to_port: 25
            cidr_ip: "{{ aws_vpn_subnet }}"
          - proto: tcp
            from_port: 25
            to_port: 25
            cidr_ip: "{{ aws_subnet }}"

    - name: Create security group for relay ELB
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpn_vpc }}"
        name: relay-elb
        description: relay ELB
        rules:
          - proto: tcp
            from_port: 25
            to_port: 25
            cidr_ip: 0.0.0.0/0
          - proto: icmp
            from_port: -1
            to_port: -1
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create security group for relay
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpn_vpc }}"
        name: relay
        description: relay hosts
        rules:
          - proto: tcp
            from_port: 25
            to_port: 25
            group_name: relay-elb

    - name: Create security group for smtp ELB
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        name: smtp-elb
        description: auth SMTP ELB
        rules:
          - proto: tcp
            from_port: 25
            to_port: 25
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 465
            to_port: 465
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 587
            to_port: 587
            cidr_ip: 0.0.0.0/0
          - proto: icmp
            from_port: -1
            to_port: -1
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create security group for smtp
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        name: smtp
        description: auth SMTP
        rules:
          - proto: tcp
            from_port: 25
            to_port: 25
            group_name: smtp-elb
          - proto: tcp
            from_port: 465
            to_port: 465
            group_name: smtp-elb
          - proto: tcp
            from_port: 587
            to_port: 587
            group_name: smtp-elb

    - name: Create security group for rsyslog
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpn_vpc }}"
        name: rsyslog
        description: rsyslog hosts
        rules:
          - proto: tcp
            from_port: 2514
            to_port: 2514
            cidr_ip: "{{ aws_vpn_subnet }}"
          - proto: tcp
            from_port: 2514
            to_port: 2514
            cidr_ip: "{{ aws_subnet }}"
          - proto: tcp
            from_port: 5672
            to_port: 5672
            cidr_ip: "{{ aws_vpn_subnet }}"
          - proto: tcp
            from_port: 5672
            to_port: 5672
            cidr_ip: "{{ aws_subnet }}"
          - proto: tcp
            from_port: 8888
            to_port: 8888
            cidr_ip: "{{ aws_subnet }}"
          - proto: tcp
            from_port: 3000
            to_port: 3000
            cidr_ip: "{{ aws_subnet }}"

    - name: Create security group for EFS
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        name: EFS
        description: allows NFS from the VPC
        rules:
          - proto: tcp
            from_port: 2049
            to_port: 2049
            group_name: main-default

    - name: Create security group for RBL
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        name: rbl
        description: RBL hosts
        rules:
          - proto: udp
            from_port: 53
            to_port: 53
            cidr_ip: "{{ aws_vpn_subnet }}"
          - proto: udp
            from_port: 53
            to_port: 53
            cidr_ip: "{{ aws_subnet }}"

    - name: Create security group for redis
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ aws_vpc }}"
        name: redis
        description: redis hosts
        rules:
          - proto: tcp
            from_port: 6379
            to_port: 6379
            cidr_ip: "{{ aws_vpn_subnet }}"
          - proto: tcp
            from_port: 6379
            to_port: 6379
            cidr_ip: "{{ aws_subnet }}"
          - proto: tcp
            from_port: 16379
            to_port: 16379
            cidr_ip: "{{ aws_vpn_subnet }}"
          - proto: tcp
            from_port: 16379
            to_port: 16379
            cidr_ip: "{{ aws_subnet }}"

