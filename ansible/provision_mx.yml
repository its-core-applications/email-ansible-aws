---

- include: task_find_ami.yml
  vars:
    launch_class: mx

- hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - name: Gather VPC subnet facts
      ec2_vpc_subnet_facts:
        region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ aws_vpc }}"
      register: ec2_subnets

    - name: Create mx hosts 
      ec2:
        group: [ main-default, mx, redis ]
        key_name: "{{ aws_ssh_key }}"
        instance_type: m4.large
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ item.id }}"
        image: "{{ find_ami.results.0.ami_id }}"
        instance_profile_name: standard
        instance_tags:
          Class: mx
          az: "{{ item.availability_zone }}"
          redis: 'yes'
        exact_count: 1
        count_tag:
          Class: mx
          az: "{{ item.availability_zone }}"
      with_items: "{{ ec2_subnets.subnets }}"
      register: ec2

- include: task_wait_for_launched.yml

- hosts: localhost
  roles:
    - { role: redis_master, tags: redis }

- include: task_dns_redis.yml

- hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - name: "Create MX loadbalancer(s)"
      ec2_elb_lb:
        name: "{{ item }}"
        region: "{{ aws_region }}"
        state: present
        idle_timeout: 3600
        connection_draining_timeout: 120
        cross_az_load_balancing: yes
        security_group_names: mx-elb
        subnets: "{{ ec2_subnets.subnets | map(attribute='id') | list }}"
        listeners:
          - protocol: tcp
            load_balancer_port: 25
            instance_port: 25
            proxy_protocol: true
        health_check:
          ping_protocol: tcp
          ping_port: 25
          response_timeout: 10
          interval: 30
          unhealthy_threshold: 2
          healthy_threshold: 5
      with_items: "{{ mx_names }}"
      register: result

    - name: "Add hosts to MX loadbalancer(s)"
      ec2_elb:
        ec2_elbs: "{{ item[0] }}"
        region: "{{ aws_region }}"
        instance_id: "{{ item[1] }}"
        state: present
        wait: false
      with_nested:
        - "{{ mx_names }}"
        - "{{ groups.tag_Class_mx | map('extract', hostvars, 'ec2_id') | list }}"

    - name: "Set pretty DNS names for MX loadbalancer(s)"
      route53:
        command: "create"
        overwrite: true
        zone: "{{ subd }}"
        record: "{{ item.elb.name }}.{{ subd }}"
        type: "A"
        alias: true
        alias_hosted_zone_id: "{{ item.elb.hosted_zone_id }}"
        value: "{{ item.elb.dns_name }}"
      with_items: "{{ result.results }}"
