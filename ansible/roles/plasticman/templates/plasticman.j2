#!/bin/bash

name=plasticman
carbon_server={{ graphite_server }}
carbon_port=2003
graphite_server={{ graphite_server }}:8888

class=${1:-mx}
region=${2:-{{ aws_region | replace('-', '_') }}}

# FIXME: This should probably go in a config file or a command line flag
min_count={{ aws_region_layout[aws_status][aws_region].mx.count }}
max_count=24

startts=$(date +%s)
retval=0

sendmetric() {
    echo "plasticman.${region}.${class}.$1 $2 $(date +%s)" | ncat $carbon_server $carbon_port
}

sendresult() {
    duration=$(( $(date +%s) - startts))

    # Send heartbeat
    jq -n -r \
    --arg source $(hostname) \
    --arg duration $duration \
    '{ name: "plasticman-heartbeat", source: $source, ttl: 300, ttl_status: 2, duration: $duration | tonumber, status: 0, output: "plasticman ran to completion" }' | ncat localhost 3030

    # Send actual result if something happened
    if [[ $1 != 'no action necessary' ]]; then
        jq -n -r \
        --arg source $(hostname) \
        --arg status $retval \
        --arg duration $duration \
        --arg msg "$1" \
        '{ name: "plasticman", source: $source, duration: $duration | tonumber, status: $status | tonumber, output: $msg }' | ncat localhost 3030
    fi
}

outlog() {
    logger -p user.info -t "$name[$$]" "$class: $1"
}

getcount() {
    count=$(ansible --list-hosts "Class_$class:&Status_production:&region_$region" | awk '/  hosts \(/{gsub(/[():]/, "", $2); print $2}')
}

checkcount() {
    oldcount=$count
    getcount
    if [[ $count -eq $oldcount ]]; then
        retval=2
        sendresult "host count did not change after scaling event"
        outlog "count did not change!"
    else
        sendresult "host count changed afted scaling event"
    fi
}

scaledown() {
    outlog "scaling down"
    sendmetric scale.down.start 1 
    ansible-playbook ~/ansible-aws/ansible/spindown_${class}.yml
    sendmetric scale.down.end 1
    outlog "finished scaling down"
    checkcount
}

scaleup() {
    outlog "scaling up"
    sendmetric scale.up.start 1
    ansible-playbook ~/ansible-aws/ansible/spinup_${class}.yml
    sendmetric scale.up.end 1
    outlog "finished scaling up"
    checkcount
}

getcount
sendmetric hostcount $count

rup=($(curl -s "http://${graphite_server}/render?target=${name}.${region}.${class}.scale.up.*&from=-6minutes&format=csv" | awk -F, 'BEGIN{ x=0 } { x += $3 } END{ print NR, x}'))
rscale=($(curl -s "http://${graphite_server}/render?target=${name}.${region}.${class}.scale.*.*&from=-60minutes&format=csv" | awk -F, 'BEGIN{ x=0 } { x += $3 } END{ print NR, x}'))

if [[ ${rup[0]} -eq 0 && ${rscale[0]} -eq 0 ]]; then
    retval=3
    sendresult "no event data"
    outlog "no event data"
    # try to fake an event so this won't happen on future runs
    sendmetric scale.down.fake 1
    exit 1
fi

rup=${rup[1]}
rscale=${rscale[1]}

if [[ $count -lt $min_count && $rup -eq 0 ]]; then
    outlog "$count is below the $min_count floor"
    scaleup
    exit 0
fi

# Check for any datapoints in the last hour and a bit where the one minute
# load average was over 1
hour=($(curl -s "http://${graphite_server}/render?target=${class}.all.load_avg.one&from=-75minutes&format=csv" | awk -F, 'BEGIN{ x=0 } $3 > 1 { x++ } END{ print NR, x }'))

# Check for datapoints in the last six minutes where the one minute load
# average was over 3
quint=($(curl -s "http://${graphite_server}/render?target=${class}.all.load_avg.one&from=-6minutes&format=csv" | awk -F, 'BEGIN{ x=0 } $3 > 3 { x++ } END{ print NR, x }'))

if [[ $count -gt $min_count && ${hour[1]} -eq 0 && $rscale -eq 0 ]]; then
    if [[ ${hour[0]} -lt 30 ]]; then
        outlog "too few datapoints to scale down"
        sendresult "too few datapoints to scale down"
    else
        scaledown
    fi
elif [[ ${quint[1]} -gt 0 && $rup -eq 0 ]]; then
    if [[ $count -ge $max_count ]]; then
        retval=1
        sendresult "maximum number of hosts provisioned."
        outlog "$count is already at the $max_count ceiling"
    else
        scaleup
    fi
else
    sendresult "no action necessary"
fi
