#!/bin/bash

name=plasticman
influx_server={{ influxdb_server }}

class=${1:-mx}
region=${2:-{{ aws_region | replace('-', '_') }}}

influx="/usr/local/bin/influxquery -H $influx_server -d sensu"
influx_jq="jq .results[0].series[0].values[0][1]"

# FIXME: This should probably go in a config file or a command line flag
min_count={{ aws_region_layout[aws_status][aws_region].mx.count }}
max_count=24

startts=$(date +%s)
retval=0

sendmetric() {
    $influx "INSERT plasticman,region=${region},class=${class},action=$1,phase=$2 count=1"
}

sendresult() {
    duration=$(( $(date +%s) - startts))

    # Send heartbeat
    jq -n -r \
    --arg duration $duration \
    --arg name "plasticman-$class-heartbeat" \
    '{ name: $name, ttl: 300, duration: $duration | tonumber, status: 0, output: "plasticman ran to completion", handlers: ["default"] }' > /dev/tcp/localhost/3030

    # Send actual result if something happened
    if [[ $2 ]]; then
        jq -n -r \
        --arg status $retval \
        --arg duration $duration \
        --arg msg "$1" \
        --arg name "plasticman-$class-$2" \
        '{ name: $name, metadata: { labels: { occurrences: "2" }}, duration: $duration | tonumber, status: $status | tonumber, output: $msg, handlers: ["default"] }' > /dev/tcp/localhost/3030
    fi
}

outlog() {
    logger -p user.info -t "$name[$$]" "$class: $1"
}

getcount() {
    count=$($influx "SELECT LAST(sum) FROM (SELECT SUM(instance_count) FROM ec2 WHERE Class = '$class' AND Status = 'production' GROUP BY time(5s))" | $influx_jq)
}

checkcount() {
    oldcount=$count
    # instances that were just put in production might not be counted immediately
    [[ $1 = 'scale-up' ]] && sleep 1m
    getcount
    outlog "new count: $count"
    if [[ $count -eq $oldcount ]]; then
        retval=2
        sendresult "host count did not change after scaling event" $1
        outlog "count did not change!"
    else
        sendresult "host count changed after scaling event" $1
    fi
}

scaledown() {
    outlog "scaling down from $count"
    sendmetric scale-down start
    ansible-playbook ~/ansible-aws/ansible/spindown_${class}.yml
    sendmetric scale-down end
    outlog "finished scaling down"
    checkcount scale-down
}

scaleup() {
    outlog "scaling up from $count"
    sendmetric scale-up start
    ansible-playbook ~/ansible-aws/ansible/spinup_${class}.yml
    sendmetric scale-up end
    outlog "finished scaling up"
    checkcount scale-up
}

getcount

rup=$($influx "SELECT COUNT(DISTINCT(sum)) FROM (SELECT SUM(instance_count) FROM ec2 WHERE Class = '$class' AND Status = 'production' AND time > now() - 6m GROUP BY time(30s)) WHERE sum <= $count" | $influx_jq)
rpup=$($influx "SELECT SUM(count) FROM plasticman WHERE class = '$class' AND action = 'scale-up' AND time > now() - 6m" | $influx_jq)

if [[ $count -lt $min_count && $rup -eq 1 && $rpup = 'null' ]]; then
    outlog "$count is below the $min_count floor"
    scaleup
    exit 0
fi

# Check for datapoints in the last six minutes where the one minute load
# average was over 6
quint=$($influx "SELECT COUNT(mean) FROM (SELECT MEAN(\"1_min\") FROM load_avg WHERE time >= now() - 6m AND sensu_entity_name =~ /.+\.${class}\..+/ GROUP BY time(1m)) WHERE mean > 6" | $influx_jq)

if [[ $quint != 'null' && $rup -eq 1 && $rpup = 'null' ]]; then
    if [[ $count -ge $max_count ]]; then
        retval=1
        sendresult "maximum number of hosts provisioned." scale-up
        outlog "$count is already at the $max_count ceiling"
    else
        scaleup
    fi
    exit 0
fi

rscale=$($influx "SELECT COUNT(DISTINCT(sum)) FROM (SELECT SUM(instance_count) FROM ec2 WHERE Class = '$class' AND Status = 'production' AND time > now() - 1h GROUP BY time(30s))" | $influx_jq)
rpscale=$($influx "SELECT SUM(count) FROM plasticman WHERE class = '$class' AND time > now() - 1h" | $influx_jq)

# Check for any datapoints in the last hour and a bit where the one minute
# load average was over 2
hour=$($influx "SELECT COUNT(mean) FROM (SELECT MEAN(\"1_min\") FROM load_avg WHERE time >= now() - 75m AND sensu_entity_name =~ /.+\.${class}\..+/ GROUP BY time(1m)) WHERE mean > 2" | $influx_jq)

if [[ $count -gt $min_count && $hour == 'null' && $rscale -eq 1 && $rpscale = 'null' ]]; then
    scaledown
    exit 0
fi

sendresult "no action necessary"
