#!/bin/bash

# No longer implemented; it was unreliable so we needed automated cleanup anyway
if [[ $1 = 'clear' ]]; then
    exit 0
fi

rectype=CNAME
ttl=60
region=$(curl -fs http://169.254.169.254/latest/meta-data/placement/availability-zone)
region=${region::-1}
instanceid=$(curl -fs http://169.254.169.254/latest/meta-data/instance-id)
zoneid=$(aws --profile dynhostname route53 list-hosted-zones --query "HostedZones[?Name=='{{ subd }}.'].Id" --output text)
publicname=$(curl -fs http://169.254.169.254/latest/meta-data/public-hostname)

# Fall back to the private name
if [[ -z $publicname ]]; then
    publicname=$(curl -fs http://169.254.169.254/latest/meta-data/local-ipv4)
    rectype=A
fi

sethostname() {
    echo "Setting FQDN to $1"
    hostnamectl set-hostname $1
    systemctl daemon-reload
    systemctl try-restart rsyslog.service simta.service sensu-client.service
    aws ec2 create-tags --region=$region --resources=$instanceid --tags Key=Name,Value=${1%%.*} Key=CustomDNSName,Value=$1
}

route53update() {
    change=$(aws --profile dynhostname \
        route53 change-resource-record-sets \
        --query ChangeInfo.Id \
        --output text \
        --cli-input-json \
        $(jq -nc \
            --arg zoneid $zoneid \
            --arg ttl $ttl \
            --arg fqdn $fqdn \
            --arg publicname $publicname \
            --arg rectype $rectype \
            --arg action ${1:-UPSERT} \
            '{ HostedZoneId: $zoneid, ChangeBatch: { Changes: [{ Action: $action, ResourceRecordSet: { Name: $fqdn, Type: $rectype, TTL: $ttl | tonumber, ResourceRecords: [{ Value: $publicname }]}}]}}'
        )
    )
    [[ $? -ne 0 ]] && return 1
    echo -n Waiting for Route53...
    while [[ $(aws --profile dynhostname route53 get-change --id $change --query ChangeInfo.Status --output text) != 'INSYNC' ]]; do
        echo -n .
        sleep 2
    done
    echo OK
}

if [[ -z $zoneid ]]; then
    echo "Failed to fetch zone ID, not setting hostname"
    exit 1
fi

if [[ -s /etc/dynhostname.static ]]; then
    fqdn=$(cat /etc/dynhostname.static)
    route53update
    sethostname $fqdn
    exit 0
fi

try=0
while [[ $try -le 5 ]] && [[ -z $tags ]]; do
    tags=$(aws ec2 describe-tags --region=$region --filter="Name=resource-id,Values=$instanceid")
    if [[ -z $tags ]]; then
        if [[ $(( try++ )) -gt 5 ]]; then
            echo "Failed to fetch tags, not setting hostname"
            exit 1
        fi
        sleep 1
    fi
done

# Fetch an existing DNS name, if set
fqdn=$(echo $tags | jq -r '.Tags[] | select(.Key == "CustomDNSName") | .Value')

if [[ $fqdn ]]; then
    route53update
    sethostname $fqdn
    exit 0
fi

# Otherwise generate one automatically
class=$(echo $tags | jq -r '.Tags[] | select(.Key == "Class") | .Value')
if [[ -z $class ]]; then
    echo "Failed to fetch class, not setting hostname"
    exit 1
fi
base=${class}.{{ subd }}
prefixes=/usr/share/hostname-prefixes
suffixes=/usr/share/hostname-suffixes
[[ -s ${prefixes}-$class ]] && prefixes=${prefixes}-$class
[[ -s ${suffixes}-$class ]] && suffixes=${suffixes}-$class

try=0
while [[ -z $name ]]; do
    name=$(shuf -n 1 $prefixes)-$(shuf -n 1 $suffixes)
    fqdn=${name}.$base
    # Try to add it to DNS. This will fail if it already exists, which should
    # avoid any possibility of a race.
    route53update CREATE
    if [[ $? -ne 0 ]]; then
        if [[ $(( try++ )) -gt 10 ]]; then
            echo "dynhostname is giving up..."
            exit 1
        fi
        unset name
        sleep 1
    fi
done

sethostname $fqdn
