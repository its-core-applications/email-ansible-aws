- tags:
    - ec2_launch
    - ec2
    - launch
  become: false
  vars:
    launch_groups_default:
       - "{{ launch_subnet_type | default('public') }}-default"
  block:
    - name: Check guardrail
      assert:
        that: launch_class in aws_layout[aws_status][aws_profile].classes
        fail_msg: If you're really sure you want to launch this instance, modify aws_layout to allow it.

    - import_role:
        name: ec2_security_groups
      vars:
        ec2sg_groups: "{{ launch_groups_default | union(launch_groups) }}"

    - name: Set keypair facts
      set_fact:
        aws_ssh_key: "{{ aws_resource_prefix }} {{ ((public_key | split)[0:2] | join(' ') | hash('sha1'))[:6] }}"
        aws_ssh_key_material: "{{ public_key }}"
      vars:
        public_key: "{{ lookup('file', playbook_dir ~ '/../id_ed25519.' ~ ansible_user ~ '.pub') }}"

    - name: Create keypair
      ec2_key:
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        name: "{{ aws_ssh_key }}"
        key_material: "{{ aws_ssh_key_material }}"
        force: true

    - name: Get AMI data
      ec2_ami_info:
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        owners: self
        filters:
          "tag:os": "{{ launch_os | default('amzn2') }}"
          "tag:image_type": "{{ launch_ami_class | default(launch_class) | replace('-', '_') }}"
      register: find_ami_facts

    - name: Find latest AMI
      set_fact:
        find_ami: "{{ find_ami_facts.images | sort(attribute='creation_date') | last }}"

    - import_role:
        name: ec2_find_subnets

    - name: Create {{ launch_class }} instance(s)
      ec2_instance:
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        security_groups: "{{ launch_groups_default | union(launch_groups) | map('regex_replace', '^', aws_resource_prefix ~ ' ') }}"
        key_name: "{{ aws_ssh_key }}"
        instance_type: "{{ aws_layout[aws_status][aws_profile]['classes'][launch_class].size | default(aws_layout[aws_status][aws_profile].default_instance) }}"
        vpc_subnet_id: "{{ (launch_subnet | default(ec2_subnets[aws_profile][item % (ec2_subnets[aws_profile] | length)])).id }}"
        network:
          assign_public_ip: "{{ launch_public_ip }}"
          delete_on_termination: true
        image_id: "{{ find_ami.image_id }}"
        instance_role: "{{ aws_resource_prefix }}_{{ launch_profile | default('standard') }}"
        tags: "{{ launch_tags_default | combine(launch_tags) }}"
        filters:
          "tag:Name": We never want to match an existing instance, and this should ensure that.
        wait: false
      vars:
        ec2_subnets: "{{ lookup('vars', 'ec2_subnets_' ~ (launch_subnet_type | default('public'))) }}"
        launch_count_default: "{{ (aws_layout[aws_status][aws_profile]['classes'][launch_class].count | default(1)) - (groups['Class_' ~ launch_class | replace('-', '_')] | intersect(aws_region_group) | intersect(groups.Status_production | union(groups.Status_spinup) | union(groups.Status_development)) | length) }}"
        launch_tags_default:
          Class: "{{ launch_class }}"
          Status: spinup
          BusinessOwner: "{{ aws_resource_owner }}"
      loop: "{{ range(launch_count | default(launch_count_default) | int) }}"
      ignore_errors: true
      register: ec2

    - name: Wait for launched instances to have hostnames
      ec2_instance_info:
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        instance_ids: "{{ ec2_instances }}"
      vars:
        ec2_instances: "{{ ec2.results | selectattr('instance_ids', 'defined') | map(attribute='instance_ids') | flatten }}"
      when: ec2_instances | length
      ignore_errors: true
      register: result
      until: (result.instances | default([]) | map(attribute='tags.CustomDNSName') | select('defined') | length) == (ec2_instances | length)
      retries: 20
      delay: 15

    - name: Mark laggard instances as spundown
      ec2_tag:
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        resource: "{{ item.instance_id }}"
        tags:
          Status: spundown
      loop: "{{ result.instances | default([]) | rejectattr('tags.CustomDNSName', 'defined') }}"
      loop_control:
        label: "{{ item.instance_id }}"

    - meta: refresh_inventory

    - name: Flush DNS cache
      command: unbound-control reload
      become: true
      when:
        - result is not skipped
        - lookup('env', 'USER') == 'ec2-user'

    - name: Wait for launched instances to be available
      delegate_to: "{{ item.tags.CustomDNSName }}"
      wait_for_connection:
        delay: 2
        sleep: 2
        timeout: 300
      when: launch_wait | default(true)
      loop: "{{ result.instances | default([]) | selectattr('tags.CustomDNSName', 'defined') }}"
      loop_control:
        label: "{{ item.instance_id }}"

