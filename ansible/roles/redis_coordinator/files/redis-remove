#!/usr/local/venv/system/bin/python3

import logging
import logging.handlers
import os
import sys
import time

from redis import Redis, RedisError


def repl_steal(repl, primary_id):
    logger = logging.getLogger()

    logger.info(f'Making {repl} into a replica of {primary_id}')
    client = Redis(host=repl, decode_responses=True)
    client.execute_command('CLUSTER REPLICATE', primary_id)

    attempt = 0
    while True:
        attempt += 1

        nodes = client.execute_command('CLUSTER NODES')
        node = nodes[f'{repl}:6379']
        if node['master_id'] == primary_id:
            return

        if attempt > 30:
            raise TimeoutError('Timed out waiting for repl steal')

        logger.info(f'Waiting for {repl} to replicate {primary_id}...')
        time.sleep(1)


def failover(host, client):
    logger = logging.getLogger()

    nodes = client.execute_command('CLUSTER NODES')
    try:
        node = nodes[f'{host}:6379']
    except KeyError:
        # If we don't know about ourself we're not in a normal cluster state
        # and there's no failover to do.
        return True

    replicas = [k.split(':')[0] for k, v in nodes.items() if v['master_id'] == node['node_id']]

    if node['slots'] and 'master' in node['flags'].split(','):
        if len(replicas) == 0:
            logger.info('No current replica, choosing a random replica to steal...')
            attempt = 0
            while True:
                attempt += 1
                replicas = [k.split(':')[0] for k, v in nodes.items() if v['master_id'] not in ['-', node['node_id']]]
                if replicas:
                    try:
                        repl_steal(replicas[0], node['node_id'])
                    except (RedisError, TimeoutError):
                        logger.exception('Steal failed')
                        pass
                    else:
                        break

                if attempt > 3:
                    logger.error('No replica available to steal!')
                    return False

                time.sleep(5)
                nodes = client.execute_command('CLUSTER NODES')

        repl = replicas[0]
        repl_client = Redis(host=repl, decode_responses=True)

        logger.info(f'Promoting {repl} to primary')
        attempt = 0
        while True:
            attempt += 1
            if attempt > 30:
                logger.error('Giving up on failover.')
                return False
            if attempt > 1:
                logger.info(f'Waiting for {repl} to accept the failover...')
                time.sleep(1)

            try:
                repl_client.execute_command('CLUSTER FAILOVER')
            except RedisError:
                logger.exception('Failover failed')

            try:
                res = repl_client.role()
            except RedisError:
                logger.exception('Role fetch failed')
            else:
                if res[0] == 'master':
                    break

        attempt = 0
        while True:
            attempt += 1
            if attempt > 30:
                logger.error(f'{host} is still primary, we cannot remove it')
                return False
            if attempt > 1:
                logger.info(f'Waiting for {host} to stop being primary...')
                time.sleep(1)

            nodes = client.execute_command('CLUSTER NODES')
            node = nodes[f'{host}:6379']
            if 'slave' in node['flags'].split(','):
                break

    elif len(replicas) > 0:
        # We have a replica but aren't a primary. This is weird, but happens.
        # Tell them to replicate directly.
        logger.warning(f'{host} is a replica and has a replica')
        primary = node['master_id']
        for repl in replicas:
            logger.info(f'Telling mistaken replica {repl} to replicate {primary}')
            repl_client = Redis(host=repl, decode_responses=True)
            try:
                repl_client.execute_command('CLUSTER REPLICATE', primary)
            except RedisError:
                logger.exception('Mistaken replica fix failed')
                pass

    attempt = 0
    while True:
        attempt += 1
        if attempt > 30:
            logger.error(f'{host} still has replicas, we cannot remove it.')
            return False
        if attempt > 1:
            logger.info(f'Waiting for {host} to stop having replicas...')
            time.sleep(1)

        nodes = client.execute_command('CLUSTER NODES')
        if not any([x['master_id'] == node['node_id'] for x in nodes.values()]):
            break

    return True


def main():
    logger = logging.getLogger()
    handler = logging.handlers.SysLogHandler(address='/dev/log')
    handler.ident = f'redis-remove[{os.getpid()}]: '
    logger.addHandler(handler)
    handler = logging.StreamHandler()
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)

    if len(sys.argv) != 2:
        print(f'Usage: {sys.argv[0]} <ip>', file=sys.stderr)
        sys.exit(1)

    host = sys.argv[1]
    client = Redis(host=host, decode_responses=True)

    attempt = 0
    while True:
        attempt += 1
        if attempt > 2:
            logger.info(f'No pong from {host}, assuming it was already removed.')
            sys.exit(0)
        if attempt > 1:
            time.sleep(1)
        try:
            client.ping()
        except RedisError:
            logger.exception('Ping failed')
            pass
        else:
            break

    attempt = 0
    while True:
        attempt += 1
        if not failover(host, client):
            if attempt < 4:
                logger.info('Retrying failover process.')
            else:
                logger.error('Failover appears to be impossible.')
                sys.exit(1)
        else:
            break

    nodes = client.execute_command('CLUSTER NODES')
    node = nodes.get(f'{host}:6379')

    logger.info(f'Shutting down {host}')
    client.config_set('appendonly', 'no')
    client.shutdown(nosave=True)

    time.sleep(5)

    # If we're in a normal state, try to make other nodes forget.
    # Stale entries will get cleaned up by `redis-manage`, so this step
    # failing or being skipped isn't a critical issue.
    if node:
        logger.info(f'Forgetting {host}...')
        for neighbour in [v.split(':')[0] for v in nodes.keys()]:
            if neighbour == host:
                continue
            client = Redis(host=neighbour, decode_responses=True)
            logger.info(f'Forgetting from {neighbour}...')
            try:
                client.execute_command('CLUSTER FORGET', node['node_id'])
            except RedisError:
                logger.exception('Forget failed')
                pass


if __name__ == '__main__':
    main()
