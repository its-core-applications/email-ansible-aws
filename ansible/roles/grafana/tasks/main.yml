- tags:
    - grafana
  block:
    - name: Configure grafana repo
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/grafana.repo
        src: grafana.repo
        owner: root
        group: root
        mode: "0644"

    - name: Install grafana
      ansible.builtin.dnf:
        # >=9.4.0 breaks InfluxDB sources
        name: grafana < 9.4.0
        state: latest
      notify: Restart grafana

    - name: Install extra packages
      ansible.builtin.dnf:
        name:
          - jsonnet
        state: latest

    - name: Configure grafana
      ansible.builtin.template:
        dest: /etc/grafana/grafana.ini
        src: grafana.ini.j2
        owner: root
        group: root
        mode: "0644"
      notify: Restart grafana

    - name: Configure grafana provisioning
      ansible.builtin.template:
        dest: /etc/grafana/provisioning/{{ item }}/all.yml
        src: "{{ item }}.yml.j2"
        owner: root
        group: root
        mode: "0644"
      loop:
        - datasources
        - dashboards
      notify: Restart grafana

    - tags:
        - grafonnet
      block:
        - name: Create dashboard storage directory
          ansible.builtin.file:
            dest: /var/lib/grafana/dashboards
            state: directory
            owner: root
            group: root
            mode: "0755"

        - name: Clone grafonnet
          git:
            repo: https://github.com/grafana/grafonnet-lib.git
            dest: /var/cache/grafonnet
            force: true

        - name: Install dashboard templates
          ansible.builtin.copy:
            src: "{{ item }}"
            dest: /var/lib/grafana/dashboards/{{ item | basename }}
            owner: root
            group: root
            mode: "0644"
          loop: "{{ query('fileglob', 'dashboards/*.jsonnet') }}"
          register: result

        - name: Build dashboards
          command: jsonnet -J /var/cache/grafonnet --ext-code regions -o {{ item.dest[:-3] }} {{ item.dest }}
          environment:
            regions: "{{ aws_layout[aws_status] | dict2items | rejectattr('value.controller', 'defined') | map(attribute='value.region') | list | to_json }}"
          loop: "{{ result.results }}"
          loop_control:
            label: "{{ item.dest | default(item.item) }}"

    - name: See if we have a database backup
      stat:
        path: /home/email/grafana.db
      register: result

    - name: Restore database backup
      when: result.stat.exists
      block:
        - name: Restore grafana.db
          command:
            cmd: cp /home/email/grafana.db /var/lib/grafana
            creates: /var/lib/grafana/grafana.db
          notify: Restart grafana

        - name: Fix permissions on grafana.db
          ansible.builtin.file:
            dest: /var/lib/grafana/grafana.db
            owner: grafana
            group: grafana
            mode: "0644"

    - name: Enable grafana
      systemd:
        name: grafana-server
        enabled: true
      notify: Restart grafana

    - name: Start grafana
      systemd:
        name: grafana-server
        state: started

    - name: Configure a vhost for graphs.{{ subd }}
      ansible.builtin.template:
        dest: /etc/httpd/conf.d/graphs.{{ subd }}.conf
        src: httpd.conf.j2
        owner: root
        group: root
        mode: "0644"
      notify: Restart httpd

    - ansible.builtin.import_role:
        name: httpd

    - ansible.builtin.import_role:
        name: letsencrypt
      vars:
        certificate: graphs.{{ subd }}
        le_services:
          - httpd

    - name: Schedule backups of grafana.db
      cron:
        name: backup grafana.db
        minute: "*/10"
        job: cp /var/lib/grafana/grafana.db /home/email/

