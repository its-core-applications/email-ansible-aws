- tags:
    - ara
  vars:
    ara_hostname: ara.{{ aws_region }}.{{ subd }}
  block:
    - import_role:
        name: httpd

    - name: Clone ARA repo
      git:
        repo: https://github.com/ansible-community/ara.git
        dest: /var/cache/ara.git
        version: 6c7ac4cc3f90a6703b2a037f466b085709181500
        update: true
        force: true

    - import_role:
        name: python_venv
      vars:
        venv_name: ara_server
        venv_py3: true
        venv_packages:
          - /var/cache/ara.git[server]
          - gunicorn
          - tzlocal<2.0 # 2.0 has a broken sanity check and throws ValueError
          - django<2.2  # SQLite 3.8.3 is required in 2.2

    - name: Install extra packages
      yum:
        name:
          - mod_auth_openidc
        state: latest

    - import_role:
        name: letsencrypt
      vars:
        certificate: "{{ ara_hostname }}"
        le_services:
          - httpd

    - name: Create data storage area
      file:
        dest: /home/ara/
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"

    - name: Configure ARA API
      template:
        dest: /home/ara/settings.yml
        src: settings.yml.j2
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"

    - name: Run SQL migrations
      become: false
      command: /usr/local/venv/ara_server/bin/ara-manage migrate
      environment:
        ARA_SETTINGS: /home/ara/settings.yml

    - name: Schedule data storage cleanup
      cron:
        name: ara-cleanup
        user: "{{ ansible_user }}"
        hour: 0
        minute: 15
        job: env ARA_SETTINGS=/home/ara/settings.yml /usr/local/venv/ara_server/bin/ara playbook prune --days 20 --limit 2000 --confirm

    - name: Configure gunicorn service
      template:
        dest: /etc/systemd/system/ara-api.service
        src: ara-api.service.j2
        owner: root
        group: root
        mode: "0644"

    - name: Enable ara-api
      systemd:
        name: ara-api
        enabled: true
        daemon_reload: true

    - name: Start ara-api
      systemd:
        name: ara-api
        state: restarted

    - name: Configure ARA vhost
      template:
        dest: /etc/httpd/conf.d/{{ ara_hostname }}.conf
        src: httpd.conf.j2
        owner: root
        group: root
        mode: "0644"
      notify: Restart httpd
