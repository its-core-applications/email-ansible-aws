- tags:
    - lambda
  delegate_to: localhost
  become: true
  block:
    - import_role:
        name: aws_get_accountinfo

    - name: Create cache dir
      file:
        dest: "{{ lambda_cache_dir }}/pkg"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Clone function
      git:
        repo: "{{ lambda_git_repo }}"
        dest: "{{ lambda_cache_dir }}/pkg"
        separate_git_dir: "{{ lambda_cache_dir }}/git"
      when: lambda_git_repo
      register: clone_result

    - name: Copy function
      copy:
        src: lambda/{{ lambda_name }}.py
        dest: "{{ lambda_cache_dir }}/pkg/{{ lambda_name }}.py"
        owner: root
        group: root
        mode: "0644"
      when: clone_result is skipped
      register: copy_result

    - name: Install function dependencies
      pip:
        name: "{{ lambda_reqs }}"
        state: latest
        executable: pip3
        extra_args: -t {{ lambda_cache_dir }}/pkg
      when:
        - lambda_reqs | default(False)
        - clone_result is changed or copy_result is changed

    - name: Create zip archive
      archive:
        dest: "{{ lambda_cache_dir }}/{{ lambda_name }}.zip"
        path: "{{ lambda_cache_dir }}/pkg/"
        format: zip

    - become: false
      block:
        - name: Create IAM role for Lambda
          iam_role:
            profile: "{{ lambda_profile }}"
            name: "{{ aws_resource_prefix }}_lambda_basic"
            description: Basic execution role for Lambda
            assume_role_policy_document:
              Version: "2012-10-17"
              Statement:
                - Action: sts:AssumeRole
                  Effect: Allow
                  Principal:
                    Service: lambda.amazonaws.com
            managed_policies:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
            purge_policies: true
          register: result

        - name: Wait for the role to be usable
          pause:
            seconds: 60
          when: result is changed

        - name: Create Lambda function
          lambda:
            region: "{{ lambda_region }}"
            profile: "{{ lambda_profile }}"
            name: "{{ aws_resource_prefix }}_{{ lambda_name }}"
            description: "{{ lambda_description }}"
            role: "{{ aws_resource_prefix }}_lambda_basic"
            src: "{{ lambda_cache_dir }}/{{ lambda_name }}.zip"
            runtime: python3.6
            timeout: "{{ lambda_timeout }}"
            handler: "{{ lambda_handler }}"
            environment_variables: "{{ lambda_env | default(omit, True) }}"
            vpc_subnet_ids: "{{ lambda_subnets | default(omit) }}"
            vpc_security_group_ids: "{{ lambda_sg | default(omit) }}"
          register: result
