- tags:
    - sensu
    - sensu_backend
  # I've given up on waiting for custom module groups to be implemented upstream.
  # Hacks it is.
  vars:
    sensu_auth: &sensu_auth
      auth:
        url: http://localhost:4567/
        password: "{{ sensu_password }}"
  block:
    - ansible.builtin.import_role:
        name: influxdb

    - ansible.builtin.import_role:
        name: sensu_common

    - name: Install sensu-go backend
      ansible.builtin.dnf:
        name:
          - sensu-backend
          - sensu-influxdb-handler
          - sensu-prometheus-collector
        state: latest
      notify: Restart sensu-backend

    - name: Install sensu-backend unit
      ansible.builtin.copy:
        src: sensu-backend.service
        dest: /etc/systemd/system/sensu-backend.service
        owner: root
        group: root
        mode: "0644"

    - ansible.builtin.import_role:
        name: firewall
      vars:
        firewall_ports:
          - 3000/tcp  # dashboard
          - 4567/tcp  # API
          - 8081/tcp  # transport

    - ansible.builtin.import_role:
        name: sns2slack

    - name: Create SNS topics
      delegate_to: localhost
      become: false
      sns_topic:
        region: "{{ aws_layout[aws_status][aws_profile_sns].region }}"
        profile: "{{ aws_profile_sns }}"
        name: "{{ item.name }}"
        display_name: "{{ item.display_name }}"
        state: present
        purge_subscriptions: false
        subscriptions: "{{ item.subscriptions[aws_status] }}"
      loop: "{{ sensu_sns }}"

    - ansible.builtin.import_role:
        name: ec2_instance_profile
      vars:
        ec2_profile_user: sensu
        ec2_profile: snspublish
        ec2_profile_role: arn:aws:iam::{{ aws_layout[aws_status][aws_profile_sns].account }}:role/{{ aws_resource_prefix }}_SNS

    - name: Install custom plugins
      ansible.builtin.copy:
        dest: /usr/local/bin/{{ item }}
        src: "{{ item }}"
        owner: root
        group: root
        mode: "0755"
      loop:
        - handler-sns
        - mutator-metric-check
        - mutator-metric-labels

    - name: Install templated plugins
      ansible.builtin.template:
        dest: /usr/local/bin/{{ item }}
        src: "{{ item }}.j2"
        owner: root
        group: root
        mode: "0755"
      loop:
        - handler-deregister

    - name: Configure sensu backend
      ansible.builtin.template:
        dest: /etc/sensu/backend.yml
        src: backend.yml.j2
        owner: root
        group: root
        mode: "0644"
      notify: Restart sensu-backend

    - name: Enable sensu backend
      systemd:
        name: sensu-backend
        daemon_reload: true
        enabled: true
      notify: Restart sensu-backend

    - name: Start sensu backend
      systemd:
        name: sensu-backend
        state: started

    - name: Wait for Sensu to be responsive
      wait_for:
        port: 4567
        state: started

    - name: Initialize the backend
      command: sensu-backend init
      environment:
        SENSU_BACKEND_CLUSTER_ADMIN_USERNAME: admin
        SENSU_BACKEND_CLUSTER_ADMIN_PASSWORD: "{{ sensu_password }}"
      register: result
      changed_when: result.rc == 0
      failed_when:
        - result.rc != 0
        - "'store already initialized' not in result.stderr"

    - name: Disable Tessen
      sensu.sensu_go.tessen:
        state: disabled
        <<: *sensu_auth

    - name: Bind admin role
      sensu.sensu_go.role_binding:
        name: blackops-admin
        cluster_role: cluster-admin
        groups:
          - blackops
        <<: *sensu_auth

    - name: Bind read-only role for default namespace
      sensu.sensu_go.role_binding:
        name: readonly-list
        cluster_role: view
        groups:
          - readonly
        <<: *sensu_auth

    - name: Install OpsGenie handler
      sensu.sensu_go.asset:
        name: sensu-opsgenie-handler
        builds:
          - url: https://github.com/nixwiz/sensu-opsgenie-handler/releases/download/0.9.0/sensu-opsgenie-handler_0.9.0_linux_amd64.tar.gz
            sha512: 1f91856476817d4fe561c2491ed18a7651ac7738bd3e9370c3c08462322235d6ade09c8a4a55147e9d5f9b6f43077519d8574dac2316b63449a60997e61a7938
        <<: *sensu_auth

    - name: Install fatigue filter
      sensu.sensu_go.asset:
        name: fatigue_check_filter
        builds:
          - url: https://github.com/nixwiz/sensu-go-fatigue-check-filter/releases/download/0.5.0/sensu-go-fatigue-check-filter_0.5.0.tar.gz
            sha512: 6b0097d2414c10e5ccf644a21575b1cf7f495016ff3b61c2ced7ee0371da88d6a428f556e24f63255f4d3e1a45a73e6ac62805ec493f8286d8b6d0c5a6a7488b
        <<: *sensu_auth

    - name: Create the filters
      sensu.sensu_go.filter:
        name: "{{ item.name }}"
        action: "{{ item.action | default('allow') }}"
        expressions: "{{ item.expressions }}"
        runtime_assets: "{{ item.runtime_assets | default(omit) }}"
        <<: *sensu_auth
      loop:
        - name: bad_hostname
          expressions:
            - event.entity.name.match('compute.internal$') || event.entity.name.match('.aws.vdc.it.umich.edu$')
        - name: good_hostname
          action: deny
          expressions:
            - event.entity.name.match('compute.internal$')
        - name: has_check
          expressions:
            - typeof event.check !== undefined
        - name: critical
          expressions:
            - "event.check.history.filter(function(hist) { return hist.status == 2 }).length > 0"
        - name: production
          expressions:
            - "event.entity.subscriptions.filter(function(s) { return s == 'Status_production' }).length > 0"
        - name: state_change_only
          expressions:
            - event.check.history.length > 1
            - event.check.occurrences == 1
        - name: occurrences
          expressions:
            - fatigue_check(event)
          runtime_assets:
            - fatigue_check_filter

    - name: Create the SNS handlers
      sensu.sensu_go.pipe_handler:
        name: "{{ item.name }}"
        command: handler-sns -r {{ aws_layout[aws_status][aws_profile_sns].region }} -t {{ item.topic }} -d {{ aws_status }}/{{ aws_region }} -u https://dashboard.{{ aws_region }}.{{ subd }}
        filters: "{{ item.filters | union(default_filters) }}"
        <<: *sensu_auth
      vars:
        default_filters:
          - not_silenced
          - good_hostname
      loop:
        - name: email
          topic: rootmail
          filters:
            - is_incident
            - occurrences
        - name: fyi
          topic: rootmail
          filters:
            - state_change_only
        - name: page
          topic: oncall
          filters:
            - is_incident
            - occurrences
            - production
            - critical

    - name: Create the mutators
      sensu.sensu_go.mutator:
        name: "{{ item }}"
        command: mutator-{{ item }}
        <<: *sensu_auth
      loop:
        - metric-check
        - metric-labels

    - name: Create the InfluxDB handlers
      sensu.sensu_go.pipe_handler:
        name: "{{ item.name }}"
        command: sensu-influxdb-handler -d sensu
        mutator: "{{ item.mutator }}"
        filters: "{{ item.filters }}"
        <<: *sensu_auth
      loop:
        - name: influxdb
          mutator: metric-labels
          filters:
            - has_metrics
            - good_hostname
        - name: influxdb_event
          mutator: metric-check
          filters:
            - has_check
            - good_hostname

    - name: Create the InfluxDB database
      influxdb_database:
        database_name: sensu
        state: present

    - name: Set the default InfluxDB retention policy
      influxdb_retention_policy:
        database_name: sensu
        policy_name: three_weeks
        duration: 21d
        replication: 1
        default: true

    - name: Create Agent 47
      sensu.sensu_go.pipe_handler:
        name: kill_bad_clients
        command: handler-deregister
        filters:
          - bad_hostname
        <<: *sensu_auth

    - name: Create the OpsGenie handler
      sensu.sensu_go.pipe_handler:
        name: opsgenie
        command: sensu-opsgenie-handler --withLabels
        env_vars:
          OPSGENIE_AUTHTOKEN: "{{ lookup('flowerysong.hvault.kv', 'opsgenie/sensu').apikey }}"
          OPSGENIE_TEAM: ITS DISC - Core Applications
          OPSGENIE_APIURL: https://api.opsgenie.com
        runtime_assets:
          - sensu-opsgenie-handler
        filters:
          - not_silenced
          - is_incident
          - occurrences
          - production
          - critical
        <<: *sensu_auth

    - name: Create the default handler set
      sensu.sensu_go.handler_set:
        name: default
        handlers: "{{ base_handlers | union(extra_handlers[aws_status]) }}"
        <<: *sensu_auth
      vars:
        base_handlers:
          - email
          - influxdb
          - influxdb_event
          - kill_bad_clients
        extra_handlers:
          prod:
            - opsgenie
          nonprod: []

    # Sensu Go hardcodes the handler name for keepalive events
    - name: Handle keepalive timeouts
      sensu.sensu_go.handler_set:
        name: keepalive
        handlers:
          - default
        <<: *sensu_auth

    - name: Register Sensu proxy entities
      sensu.sensu_go.entity:
        name: "{{ item.name }}"
        entity_class: proxy
        subscriptions: "{{ item.subscriptions | default(omit) }}"
        <<: *sensu_auth
      loop:
        - name: "{{ aws_region }}.{{ subd }}"
          subscriptions:
            - Status_production
        - name: "{{ aws_region }}.aws.amazon.com"
          subscriptions:
            - Status_production
        - name: egress.{{ aws_region }}.{{ subd }}
          subscriptions:
            - Status_production
        - name: "{{ simta_redis_host }}"
          subscriptions:
            - Class_redis_cluster
            - Status_production

    - name: Register Sensu proxy entities for other syslog hosts
      sensu.sensu_go.entity:
        name: syslog.{{ item }}.{{ subd }}
        entity_class: proxy
        subscriptions:
          - Class_foreign_syslog
        <<: *sensu_auth
      loop: "{{ aws_layout[aws_status] | dict2items | rejectattr('value.controller', 'defined') | rejectattr('key', '==', aws_profile_ec2) | map(attribute='value.region') }}"

    - name: Register Sensu proxy entities for loadbalancers
      sensu.sensu_go.entity:
        name: "{{ item }}"
        entity_class: proxy
        subscriptions:
            - Class_loadbalancer
            - Status_production
        <<: *sensu_auth
      loop: "{{ mx_lbs | union(authn_lbs) | union(authz_lbs) }}"
      vars:
        mx_lbs: "{{ aws_layout[aws_status][aws_profile_ec2].mx_names | map('regex_replace', '$', '.' ~ subd) }}"
        authn_lbs: "{{ ('authn-relay' in aws_layout[aws_status][aws_profile_ec2].classes) | ternary(['authn-relay' ~ elbd, 'authn-relay-vpn' ~ elbd], []) }}"
        authz_lbs: "{{ ('authz-relay' in aws_layout[aws_status][aws_profile_ec2].classes) | ternary(['authz-relay' ~ elbd, 'authz-relay-vpn' ~ elbd], []) }}"
        elbd: ".{{ aws_region }}.{{ subd }}"

    - name: Monitor Sensu metrics
      sensu.sensu_go.check:
        name: sensu-metrics
        command: sensu-prometheus-collector -exporter-url http://localhost:4567/metrics -metric-prefix sensu_
        interval: 60
        publish: true
        subscriptions:
          - Class_syslog
        handlers:
          - default
        output_metric_format: influxdb_line
        <<: *sensu_auth

    - name: Monitor foreign syslog hosts
      sensu.sensu_go.check:
        name: sensu-foreign
        command: !unsafe /usr/lib64/nagios/plugins/check_http -H {{ .name }} -p 4567  -u /health
        interval: 60
        publish: true
        subscriptions:
          - Class_syslog
        handlers:
          - fyi
        proxy_requests:
          entity_attributes:
            - "entity.subscriptions.filter(function(s) { return s == 'Class_foreign_syslog' }).length > 0"
        <<: *sensu_auth

    - name: Monitor GitHub
      sensu.sensu_go.check:
        name: github-statuspage
        command: check-statuspage -d www.githubstatus.com
        interval: 300
        publish: true
        subscriptions:
          - Class_syslog
        handlers:
          - fyi
        proxy_entity_name: github.com
        <<: *sensu_auth
      when: "'cloud_monitoring' in aws_layout[aws_status][aws_profile_ec2].services"

    - name: Monitor EC2 instance counts
      sensu.sensu_go.check:
        name: ec2-instances
        command: metrics-ec2
        interval: 60
        publish: true
        subscriptions:
          - Class_syslog
        handlers:
          - default
        proxy_entity_name: "{{ aws_region }}.aws.amazon.com"
        output_metric_format: influxdb_line
        annotations:
          fatigue_check/occurrences: 5
        <<: *sensu_auth

    - name: Monitor system metrics
      sensu.sensu_go.check:
        name: system-profile
        command: system-profile-linux
        interval: 60
        publish: true
        subscriptions:
          - Status_production
        handlers:
          - default
        output_metric_format: graphite_plaintext
        <<: *sensu_auth

    - name: Monitor disk usage
      sensu.sensu_go.check:
        name: disks
        command: check-disks
        interval: 60
        publish: true
        subscriptions:
          - Status_production
        handlers:
          - default
        output_metric_format: influxdb_line
        annotations:
          fatigue_check/occurrences: 5
        <<: *sensu_auth

    - name: Monitor Vault
      sensu.sensu_go.check:
        name: vault-seal
        command: check-vault-seal
        interval: 60
        publish: true
        subscriptions:
          - Class_bastion
        handlers:
          - default
        <<: *sensu_auth
      when: "'vault' in aws_layout[aws_status][aws_profile_ec2].services"

    - name: Monitor redis
      sensu.sensu_go.check:
        name: redis
        command: check-redis
        interval: 60
        publish: true
        subscriptions:
          - redis
        handlers:
          - default
        annotations:
          fatigue_check/occurrences: 5
        <<: *sensu_auth

    - name: Monitor loadbalancers
      sensu.sensu_go.check:
        name: "{{ item.name }}"
        command: "{{ item.command }}"
        interval: 300
        publish: true
        subscriptions:
          - Class_syslog
        handlers:
          - fyi
        proxy_requests:
          entity_attributes:
            - "entity.subscriptions.filter(function(s) { return s == 'Class_loadbalancer' }).length > 0"
        <<: *sensu_auth
      loop:
        - name: cert
          command: !unsafe check-tls -H {{ .name }} --check-hostname
        - name: cert-rsa
          command: !unsafe check-tls -H {{ .name }} --check-hostname --rsa

    - name: Monitor redis clusters
      sensu.sensu_go.check:
        name: redis-cluster
        command: !unsafe check-redis-cluster -c {{ .name }}
        interval: 60
        publish: true
        subscriptions:
          - Class_syslog
        handlers:
          - default
        annotations:
          fatigue_check/occurrences: 5
        proxy_requests:
          entity_attributes:
            - "entity.subscriptions.filter(function(s) { return s == 'Class_redis_cluster' }).length > 0"
        <<: *sensu_auth

    - name: Add simta restart hook
      sensu.sensu_go.hook:
        name: restart_simta
        command: sudo /bin/systemctl try-restart simta
        timeout: 60
        <<: *sensu_auth

    - name: Monitor simta
      sensu.sensu_go.check:
        name: "{{ item.name }}"
        command: "{{ item.command }}"
        interval: "{{ item.interval | default(60) }}"
        publish: true
        subscriptions:
          - Class_authn_relay
          - Class_authz_relay
          - Class_authz_static
          - Class_egress
          - Class_jail
          - Class_mx
          - Class_relay_egress
          - Class_vdc_relay
        handlers:
          - default
        output_metric_format: "{{ ('metrics' in item.name) | ternary('influxdb_line', omit) }}"
        annotations: "{{ ('occurrences' in item) | ternary({'fatigue_check/occurrences': item.occurrences}, omit) }}"
        check_hooks: "{{ item.hooks | default(omit) }}"
        <<: *sensu_auth
      loop:
        - name: simta
          command: check-process -p simta
          occurrences: 5
        - name: simta-queue-dead
          command: /usr/libexec/simta-admin/check-simta-queue -q dead -c 0
        - name: simta-queue-fast
          command: !unsafe /usr/libexec/simta-admin/check-simta-queue -q fast -w {{ .labels.simta_fastqwarn | default "2000" }}  -c {{ .labels.simta_fastqmax | default "3000" }}
          occurrences: 5
        - name: simta-queue-local
          command: !unsafe /usr/libexec/simta-admin/check-simta-queue -q local -w {{ .labels.simta_localqwarn | default "10" }}  -c {{ .labels.simta_localqmax | default "20" }}
        - name: simta-queue-slow
          command: !unsafe /usr/libexec/simta-admin/check-simta-queue -q slow -w {{ .labels.simta_slowqwarn | default "100" }}  -c {{ .labels.simta_slowqmax | default "200" }}
          occurrences: 5
        - name: simta-queue-fast-age
          command: /usr/libexec/simta-admin/check-simta-queue-age -q fast -a 60 -c 0
          occurrences: 5
          interval: 300
          hooks:
            critical:
              - restart_simta
        - name: simta-queue-slow-age
          command: !unsafe /usr/libexec/simta-admin/check-simta-queue-age -q slow -a {{ .labels.simta_slowqage | default "7200" }} -c 0
          occurrences: 5
        - name: simta-queue-ownership
          command: /usr/libexec/simta-admin/check-simta-queue-ownership
        - name: simta-queue-slow-jailed
          command: /usr/libexec/simta-admin/check-simta-queue-jailed -q slow -c 0
        - name: simta-metrics
          command: /usr/libexec/simta-admin/metrics-simta

    - name: Monitor simta expansion
      sensu.sensu_go.check:
        name: simta-expansion
        command: /usr/libexec/simta-admin/check-simta-expansion -g simta.expansion.test@umich.edu -t success@devnull.mail.umich.edu
        interval: 60
        publish: true
        subscriptions:
          - Class_authn_relay
          - Class_authz_relay
          - Class_authz_static
          - Class_egress
          - Class_mx
          - Class_relay_egress
          - Class_vdc_relay
        handlers:
          - email
          - influxdb_event
        annotations:
          fatigue_check/occurrences: 2
        <<: *sensu_auth

    - name: Monitor simta authentication
      sensu.sensu_go.check:
        name: simta-smtp-auth
        command: check-smtp-auth -u simta
        interval: 60
        publish: true
        env_vars:
          SMTP_PASSWORD: "{{ lookup('flowerysong.hvault.kv', 'simta/ldap_password').value }}"
        subscriptions:
          - Class_authn_relay
        handlers:
          - email
          - influxdb_event
        <<: *sensu_auth

    - name: Monitor simta authentication on port 465
      sensu.sensu_go.check:
        name: simta-smtp-auth-465
        command: check-smtp-auth -u simta --tls --port 465
        interval: 60
        publish: true
        env_vars:
          SMTP_PASSWORD: "{{ lookup('flowerysong.hvault.kv', 'simta/ldap_password').value }}"
        subscriptions:
          - Class_authn_relay
        handlers:
          - email
          - influxdb_event
        <<: *sensu_auth


    - name: Monitor IP reputation
      sensu.sensu_go.check:
        name: dnsbl
        command: check-dnsbl
        interval: 300
        timeout: 240
        publish: true
        subscriptions:
          - Class_egress
          - Class_relay_egress
        handlers:
          - default
        <<: *sensu_auth
      when: aws_status == 'prod'

    - name: Extra monitoring for inbound hosts
      vars:
        inbound_hosts:
          - Class_authn_relay
          - Class_authz_relay
          - Class_authz_static
          - Class_mx
          - Class_vdc_relay
      block:
        - name: Monitor DNSLs
          sensu.sensu_go.check:
            name: dnsl
            command: check-dnsl
            interval: 300
            timeout: 240
            publish: true
            subscriptions: "{{ inbound_hosts }}"
            handlers:
              - influxdb_event
            <<: *sensu_auth

    - name: Monitor simta aggregates
      sensu.sensu_go.check:
        name: "{{ item.name }}-aggregate"
        command: check-aggregate -H {{ influxdb_server }} --check {{ item.name }}
        stdin: true
        interval: 60
        publish: true
        subscriptions:
          - Class_syslog
        handlers:
          - default
        proxy_entity_name: "{{ aws_region }}.{{ subd }}"
        annotations:
          dashboard_host: dashboard.{{ aws_region }}.{{ subd }}
          fatigue_check/occurrences: "{{ item.occurrences }}"
        <<: *sensu_auth
      loop:
        - name: dnsl
          occurrences: 10
        - name: simta-expansion
          occurrences: 3

    - name: Monitor simta auth aggregate
      sensu.sensu_go.check:
        name: "{{ item }}-aggregate"
        command: check-aggregate -H {{ influxdb_server }} --check {{ item }}
        stdin: true
        interval: 60
        publish: true
        subscriptions:
          - Class_syslog
        handlers:
          - default
        proxy_entity_name: "{{ aws_region }}.{{ subd }}"
        annotations:
          dashboard_host: dashboard.{{ aws_region }}.{{ subd }}
          fatigue_check/occurrences: 3
        <<: *sensu_auth
      loop:
        - simta-smtp-auth
        - simta-smtp-auth-465
      when: "'authn-relay' in aws_layout[aws_status][aws_profile_ec2].classes"

    - name: Monitor rbldnsd
      sensu.sensu_go.check:
        name: rbldnsd
        command: check-process -p rbldnsd
        interval: 60
        publish: true
        subscriptions:
          - Class_dnsbl
        handlers:
          - default
        <<: *sensu_auth

    - name: Monitor rbldnsd metrics
      sensu.sensu_go.check:
        name: rbldnsd-metrics
        command: metrics-rbldnsd
        interval: 60
        publish: true
        subscriptions:
          - Class_dnsbl
        handlers:
          - default
        output_metric_format: influxdb_line
        <<: *sensu_auth

    - name: Monitor rspamd
      sensu.sensu_go.check:
        name: "{{ item.name }}"
        command: "{{ item.command }}"
        interval: 60
        publish: true
        subscriptions:
          - Class_mx
        handlers:
          - default
        annotations:
          fatigue_check/occurrences: 5
        <<: *sensu_auth
      loop:
        - name: rspamd
          command: check-process -p rspamd
        - name: rspamd-greylist
          command: check-rspamd-greylist
        - name: rspamd-gtube
          command: check-rspamd-gtube

    - name: Monitor clamd
      sensu.sensu_go.check:
        name: "{{ item.name }}"
        command: "{{ item.command }}"
        interval: 60
        publish: true
        subscriptions:
          - Class_authn_relay
          - Class_authz_relay
          - Class_authz_static
          - Class_mx
          - Class_vdc_relay
        handlers:
          - default
        annotations:
          fatigue_check/occurrences: 5
        <<: *sensu_auth
      loop:
        - name: clamd
          command: check-process -p clamd
        - name: clamd-eicar
          command: check-clamd-eicar
