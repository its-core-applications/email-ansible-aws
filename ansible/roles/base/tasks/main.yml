- tags:
    - base
  block:
    - tags:
        - python
      vars:
        # Chicken and egg problem; can't use the system venv for initial
        # creation of the system venv.
        ansible_python_interpreter: /usr/bin/python3
      block:
        # This should already have been done by Packer, but it keeps breaking for       # eldritch reasons and redoing it shouldn't hurt.
        - name: Enable CRB repo
          ansible.builtin.command:
            cmd: dnf config-manager --set-enabled codeready-builder-for-rhel-9-rhui-rpms

        - name: Install Python 3.12
          ansible.builtin.dnf:
            name: python3.12
            state: latest

        # using import_role leaks ansible_python_interpreter, which is bad
        # FIXME: is this still true after the fixes to role var visibility?
        - ansible.builtin.include_role:
            name: python_venv
          vars:
            venv_name: system
            venv_packages:
              - awscli
              - boto3
              - cryptography
              - influxdb
              - netaddr
              - pyyaml
              - redis
              - requests
              - git+https://github.com/its-core-applications/s3_datastore
            venv_wrappers:
              - name: datastore-fetch
              - name: datastore-upload

    - gather_facts:

    - name: Correct permissions on /var/tmp
      ansible.builtin.file:
        dest: /var/tmp
        state: directory
        owner: root
        group: root
        mode: "1777"

    - name: Disable SELinux
      selinux:
        state: disabled
      vars:
        ansible_python_interpreter: /usr/bin/python

    - name: Disable SELinux entirely
      ansible.builtin.command:
        cmd: grubby --update-kernel=ALL --args="selinux=0"

    - ansible.builtin.import_role:
        name: base_packages

    - name: Reload udev rules to ensure drive aliases are present
      ansible.builtin.command: udevadm {{ item }}
      loop:
        - control --reload
        - trigger
        - settle

    - when: not bootstrap
      block:
        # /dev/xvd* relies on a package that we build, so skip it during bootstrap
        - name: Create filesystem for /var/tmp
          community.general.filesystem:
            dev: /dev/xvdg
            fstype: xfs
            force: false

        - name: Mount /var/tmp
          ansible.posix.mount:
            name: /var/tmp
            src: /dev/xvdg
            fstype: xfs
            state: mounted

    - name: Correct permissions on /var/tmp
      ansible.builtin.file:
        dest: /var/tmp
        state: directory
        owner: root
        group: root
        mode: "1777"

    - ansible.builtin.import_role:
        name: base_userenv

    - ansible.builtin.import_role:
        name: nonpeople
      when: not bootstrap

    - ansible.builtin.import_role:
        name: rsyslog

    - name: Configure sshd
      ansible.builtin.copy:
        dest: /etc/ssh/sshd_config
        src: sshd_config
        owner: root
        group: root
        mode: "0644"
      notify: Restart sshd

    - name: Install SSH client CA
      ansible.builtin.copy:
        dest: /etc/ssh/ssh_client_ca.pub
        src: ssh_client_ca.pub
        owner: root
        group: root
        mode: "0444"

    - name: Trust SSH server CA
      ansible.builtin.copy:
        dest: /etc/ssh/ssh_known_hosts
        src: ssh_known_hosts
        owner: root
        group: root
        mode: "0444"

    - ansible.builtin.import_role:
        name: sshguard
      when: not bootstrap

    - name: Configure sudoers
      ansible.builtin.template:
        dest: /etc/sudoers
        src: sudoers.j2
        owner: root
        group: root
        mode: 0440
        validate: visudo -cf %s

    - name: Configure cloud-init
      ansible.builtin.template:
        dest: /etc/cloud/cloud.cfg
        src: cloud.cfg.j2
        owner: root
        group: root
        mode: "0644"

    # Disable predictable network interface names
    - name: Configure grub
      ansible.builtin.copy:
        dest: /etc/default/grub
        src: grub
        owner: root
        group: root
        mode: "0640"
      register: result

    - name: Rebuild grub.cfg
      command: grub2-mkconfig -o /boot/grub2/grub.cfg
      when: result is changed

    - name: Set correct timezone
      timezone:
        name: America/Detroit

    - name: Customize environment
      ansible.builtin.copy:
        dest: /etc/profile.d/99_custom.sh
        src: profile.sh
        owner: root
        group: root
        mode: "0644"

    - name: Remove RHEL file cruft
      ansible.builtin.file:
        dest: "{{ item }}"
        state: absent
      loop:
        - /etc/cron.daily/rhsmd
        - /etc/motd
        - /etc/motd.d/insights-client

    - name: Basic krb5 configuration
      # The main reason we're doing this is that the kerberos library used for
      # sensu authentication dies if this file contains
      # `dns_canonicalize_hostname = fallback`.
      ansible.builtin.copy:
        dest: /etc/krb5.conf
        src: krb5.conf
        owner: root
        group: root
        mode: "0644"

    - name: System crypto policy
      # Need to enable additional Kerberos crypto types
      ansible.builtin.command:
        cmd: update-crypto-policies --set DEFAULT:AD-SUPPORT-LEGACY

    - name: Configure tmux
      ansible.builtin.copy:
        dest: /etc/tmux.conf
        src: tmux.conf
        owner: root
        group: root
        mode: "0644"

    - name: Set sysctl parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        reload: true
        ignoreerrors: true
      loop:
        - name: kernel.core_pattern
          value: /var/tmp/%e.core.%p
        - name: kernel.pid_max
          value: 4194304
        - name: fs.suid_dumpable
          value: 2
        - name: vm.overcommit_memory
          value: 1

    - name: Raise corefile limits
      ansible.builtin.copy:
        dest: /etc/security/limits.d/core.conf
        src: core.conf
        owner: root
        group: root
        mode: "0644"

    - name: Configure cron scheduled jobs
      ansible.builtin.copy:
        dest: /etc/cron.d/dailyjobs
        src: dailyjobs.cron
        owner: root
        group: root
        mode: "0644"

    - name: Configure cron search path
      cron:
        name: PATH
        value: /sbin:/bin:/usr/local/sbin:/usr/local/bin
        env: true
        state: present

    - name: Configure OpenSSL certificate generation
      ansible.builtin.copy:
        dest: /etc/pki/tls/{{ item }}
        src: "{{ item }}"
        owner: root
        group: root
        mode: "0644"
      loop:
        - openssl.cnf
        - openssl-san.cnf

    - ansible.builtin.import_role:
        name: dynhostname

    - vars:
        ec2_profile: datastore
        ec2_profile_role: arn:aws:iam::{{ aws_layout[aws_status][aws_profile_s3].account }}:role/{{ aws_resource_prefix }}_S3_ds
      block:
        - ansible.builtin.import_role:
            name: ec2_instance_profile
          vars:
            ec2_profile_user: root

        - ansible.builtin.import_role:
            name: ec2_instance_profile
          vars:
            ec2_profile_user: simta

    - name: Install git refresh script
      ansible.builtin.copy:
        src: gitrepo-refresh-datastore
        dest: /usr/local/bin/gitrepo-refresh-datastore
        mode: "0755"
        owner: root
        group: root

    - ansible.builtin.import_role:
        name: firewall
      vars:
        firewall_services:
          - mosh

    - ansible.builtin.import_role:
        name: zabbix_agent
      when: not bootstrap
