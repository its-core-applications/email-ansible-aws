- tags:
    - aws
    - iam
  become: false
  block:
    - import_role:
        name: aws_get_accountinfo

    - import_role:
        name: route53_find_hostedzones

    - name: Create IAM policy for EC2 tagging
      iam_managed_policy:
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        state: present
        policy_name: "{{ aws_resource_prefix }}_EC2UpdateTags"
        policy_description: Read and update tags for EC2 resources
        policy:
          Version: "2012-10-17"
          Statement:
            - Action: ec2:CreateTags
              Effect: Allow
              Resource: '*'
            - Action: ec2:DescribeTags
              Effect: Allow
              Resource: '*'
            - Action: ec2:DeleteTags
              Effect: Allow
              Resource: '*'
      register: tagpolicy

    - name: Create IAM policy for {{ subd }}
      iam_managed_policy:
        profile: "{{ aws_profile_subd }}"
        state: present
        policy_name: "{{ aws_resource_prefix }}_Route53Update_{{ subd }}"
        policy_description: Update {{ subd }}
        policy:
          Version: "2012-10-17"
          Statement:
            - Action:
                - route53:ChangeResourceRecordSets
                - route53:GetHostedZone
                - route53:ListResourceRecordSets
              Effect: Allow
              Resource: arn:aws:route53:::{{ aws_zone_subd[1:] }}
            - Action:
                - route53:ListHostedZones
                - route53:ListHostedZonesByName
                - route53:GetChange
              Effect: Allow
              Resource: '*'
      register: result

    - name: Create IAM role for {{ subd }}
      iam_role:
        profile: "{{ aws_profile_subd }}"
        name: "{{ aws_resource_prefix }}_{{ aws_account }}_{{ subd }}"
        description: Cross-account access to Route53 for {{ aws_profile }}
        assume_role_policy_document:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                AWS: arn:aws:iam::{{ aws_account }}:root
        managed_policies:
          - "{{ result.policy.arn }}"
        purge_policies: true
      register: result

    - name: Create local IAM policy for {{ subd }}
      iam_managed_policy:
        profile: "{{ aws_profile }}"
        state: present
        policy_name: "{{ aws_resource_prefix }}_Route53Update_{{ subd }}_XAccount"
        policy_description: Update {{ subd }}
        policy:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Resource:
                - "{{ result.iam_role.arn }}"
      register: subdpolicy

    - name: Create IAM policy for SNS
      iam_managed_policy:
        profile: "{{ aws_profile_sns }}"
        state: present
        policy_name: "{{ aws_resource_prefix }}_SNSPublish"
        policy_description: Publish to SNS
        policy:
          Version: "2012-10-17"
          Statement:
            - Action:
                - sns:ListTopics
                - sns:Publish
              Effect: Allow
              Resource: '*'
      register: result

    - name: Create IAM role for SNS
      iam_role:
        profile: "{{ aws_profile_sns }}"
        name: "{{ aws_resource_prefix }}_{{ aws_account }}_SNS"
        description: Cross-account access to SNS for {{ aws_profile }}
        assume_role_policy_document:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                AWS: arn:aws:iam::{{ aws_account }}:root
        managed_policies:
          - "{{ result.policy.arn }}"
        purge_policies: true
      register: result

    - name: Create local IAM policy for SNS
      iam_managed_policy:
        profile: "{{ aws_profile }}"
        state: present
        policy_name: "{{ aws_resource_prefix }}_SNSPublish_XAccount"
        policy_description: Publish to SNS
        policy:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Resource:
                - "{{ result.iam_role.arn }}"
      register: snspolicy

    - name: Create IAM policy for S3 datastore
      iam_managed_policy:
        profile: "{{ aws_profile_s3 }}"
        state: present
        policy_name: "{{ aws_resource_prefix }}_S3_ds"
        policy_description: Access datastore
        policy:
          Version: "2012-10-17"
          Statement:
            - Action:
                - s3:ListAllMyBuckets
              Effect: Allow
              Resource: '*'
            - Action:
                - s3:ListBucket
                - s3:GetBucketLocation
              Effect: Allow
              Resource: arn:aws:s3:::datastore.{{ subd }}
            - Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:DeleteObject
              Effect: Allow
              Resource: arn:aws:s3:::datastore.{{ subd }}/*
      register: result

    - name: Create IAM role for S3 datastore
      iam_role:
        profile: "{{ aws_profile_s3 }}"
        name: "{{ aws_resource_prefix }}_{{ aws_account }}_S3_ds"
        description: Cross-account access to S3 datastore for {{ aws_profile }}
        assume_role_policy_document:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                AWS: arn:aws:iam::{{ aws_account }}:root
        managed_policies:
          - "{{ result.policy.arn }}"
        purge_policies: true
      register: result

    - name: Create local IAM policy for S3 datastore
      iam_managed_policy:
        profile: "{{ aws_profile }}"
        state: present
        policy_name: "{{ aws_resource_prefix }}_S3_ds_XAccount"
        policy_description: Access to S3 datastore
        policy:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Resource:
                - "{{ result.iam_role.arn }}"
      register: s3dspolicy

    - name: Create builder role
      iam_role:
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        name: "{{ aws_resource_prefix }}_builder"
        state: present
        assume_role_policy_document:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: ec2.amazonaws.com
        managed_policies:
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - "{{ subdpolicy.policy.arn }}"
          - "{{ tagpolicy.policy.arn }}"
        purge_policies: true

    - name: Create bastion role
      iam_role:
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        name: "{{ aws_resource_prefix }}_bastion"
        state: present
        assume_role_policy_document:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: ec2.amazonaws.com
        managed_policies:
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
          - arn:aws:iam::aws:policy/AmazonRoute53FullAccess
          - arn:aws:iam::aws:policy/IAMReadOnlyAccess
          - arn:aws:iam::aws:policy/SecretsManagerReadWrite
          - "{{ subdpolicy.policy.arn }}"
          - "{{ tagpolicy.policy.arn }}"
          - "{{ snspolicy.policy.arn }}"
          - "{{ s3dspolicy.policy.arn }}" # Used by Vault to issue creds
        purge_policies: true

    - name: Create standard role
      iam_role:
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        name: "{{ aws_resource_prefix }}_standard"
        state: present
        assume_role_policy_document:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: ec2.amazonaws.com
        managed_policies:
          - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
          - "{{ subdpolicy.policy.arn }}"
          - "{{ tagpolicy.policy.arn }}"
          - "{{ snspolicy.policy.arn }}"
        purge_policies: true
