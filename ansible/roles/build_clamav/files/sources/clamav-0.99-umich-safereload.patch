diff -aur clamav-0.99/clamd/others.c clamav-0.99um1/clamd/others.c
--- clamav-0.99/clamd/others.c	2015-09-18 16:48:45.000000000 -0400
+++ clamav-0.99um1/clamd/others.c	2015-12-17 15:58:00.000000000 -0500
@@ -84,6 +84,73 @@
         free(p);
 }
 
+#ifdef  _WIN32
+
+void reloadaction(const char *status, const struct cl_engine *engine, const struct optstruct *opts)
+{
+    if(optget(opts, "ReloadEvent")->enabled)
+	logg("^ReloadEvent is not supported on this platform");
+}
+
+#else
+
+#define RE_DBVERSION  "CLAM_RELOADEVENT_DBVERSION"
+
+static pthread_mutex_t reloadaction_lock = PTHREAD_MUTEX_INITIALIZER;
+
+void reloadaction(const char *status, const struct cl_engine *engine, const struct optstruct *opts)
+{
+    pid_t pid;
+    const struct optstruct *opt;
+    char *buffer_cmd;
+    char *buffer_version;
+    size_t i, j, v = 0, len;
+    char *env[2];
+    char *pt;
+
+    if(!(opt = optget(opts, "ReloadEvent"))->enabled)
+	return;
+
+    env[0] = getenv("PATH");
+    j = env[0] ? 1 : 0;
+    env[j++] = NULL;
+
+    pt = opt->strarg;
+    while(( pt = strstr(pt, "%v"))) {
+	pt += 2;
+	v++;
+    }
+    len = strlen(opt->strarg);
+    buffer_cmd = (char *)calloc( len + v * strlen(status) + 1, sizeof(char));
+    if(!buffer_cmd) {
+	return;
+    }
+    for(i = 0, j = 0; i < len; i++) {
+	if(i + 1 < len && opt->strarg[i] == '%' && opt->strarg[i + 1] == 'v') {
+	    strcat(buffer_cmd, status);
+	    j += strlen(status);
+    	    i++;
+    	} else {
+	    buffer_cmd[j++] = opt->strarg[i];
+    	}
+    }
+
+    pthread_mutex_lock(&reloadaction_lock);
+    pid = fork();
+    if(!pid) {
+	exit(execle("/bin/sh", "sh", "-c", buffer_cmd, NULL, env ));
+    } else if(pid > 0) {
+	pthread_mutex_unlock(&reloadaction_lock);
+	waitpid(pid, NULL, 0);
+    } else {
+	logg("!ReloadEvent: fork failed.\n");
+    }
+    free(buffer_cmd);
+
+}
+#endif /* _WIN32 */
+
+
 #ifdef	_WIN32
 void
 virusaction (const char *filename, const char *virname,
Only in clamav-0.99um1/clamd: others.c.orig
diff -aur clamav-0.99/clamd/others.h clamav-0.99um1/clamd/others.h
--- clamav-0.99/clamd/others.h	2015-09-18 16:48:45.000000000 -0400
+++ clamav-0.99um1/clamd/others.h	2015-12-17 15:58:00.000000000 -0500
@@ -76,6 +76,7 @@
 
 int poll_fd(int fd, int timeout_sec, int check_signals);
 void virusaction(const char *filename, const char *virname, const struct optstruct *opts);
+void reloadaction(const char *status, const struct cl_engine *engine, const struct optstruct *opts);
 int writen(int fd, void *buff, unsigned int count);
 int fds_add(struct fd_data *data, int fd, int listen_only, int timeout);
 void fds_remove(struct fd_data *data, int fd);
Only in clamav-0.99um1/clamd: others.h.orig
diff -aur clamav-0.99/clamd/server-th.c clamav-0.99um1/clamd/server-th.c
--- clamav-0.99/clamd/server-th.c	2015-09-18 16:48:45.000000000 -0400
+++ clamav-0.99um1/clamd/server-th.c	2015-12-17 15:58:00.000000000 -0500
@@ -166,6 +166,7 @@
 	int retval;
 	unsigned int sigs = 0;
 	struct cl_settings *settings = NULL;
+	struct cl_engine *new_engine = NULL;
 
     *ret = 0;
     if(do_check) {
@@ -189,9 +190,6 @@
 	settings = cl_engine_settings_copy(engine);
 	if(!settings)
 	    logg("^Can't make a copy of the current engine settings\n");
-
-	thrmgr_setactiveengine(NULL);
-	cl_engine_free(engine);
     }
 
     dbdir = optget(opts, "DatabaseDirectory")->strarg;
@@ -206,19 +204,19 @@
 	*ret = 1;
 	if(settings)
 	    cl_engine_settings_free(settings);
-	return NULL;
+	return engine;
     }
 
-    if(!(engine = cl_engine_new())) {
+    if(!(new_engine = cl_engine_new())) {
 	logg("!Can't initialize antivirus engine\n");
 	*ret = 1;
 	if(settings)
 	    cl_engine_settings_free(settings);
-	return NULL;
+	return engine;
     }
 
     if(settings) {
-	retval = cl_engine_settings_apply(engine, settings);
+	retval = cl_engine_settings_apply(new_engine, settings);
 	if(retval != CL_SUCCESS) {
 	    logg("^Can't apply previous engine settings: %s\n", cl_strerror(retval));
 	    logg("^Using default engine settings\n");
@@ -226,23 +224,26 @@
 	cl_engine_settings_free(settings);
     }
 
-    if((retval = cl_load(dbdir, engine, &sigs, dboptions))) {
+    if((retval = cl_load(dbdir, new_engine, &sigs, dboptions))) {
 	logg("!reload db failed: %s\n", cl_strerror(retval));
-	cl_engine_free(engine);
+	cl_engine_free(new_engine);
 	*ret = 1;
-	return NULL;
+	return engine;
     }
 
-    if((retval = cl_engine_compile(engine)) != 0) {
+    if((retval = cl_engine_compile(new_engine)) != 0) {
 	logg("!Database initialization error: can't compile engine: %s\n", cl_strerror(retval));
-	cl_engine_free(engine);
+	cl_engine_free(new_engine);
 	*ret = 1;
-	return NULL;
+	return engine;
     }
     logg("Database correctly reloaded (%u signatures)\n", sigs);
 
-    thrmgr_setactiveengine(engine);
-    return engine;
+    thrmgr_setactiveengine(new_engine);
+    if(engine)
+	cl_engine_free(engine);
+
+    return new_engine;
 }
 
 /*
@@ -730,6 +731,7 @@
 	struct fd_data *fds = &acceptdata.recv_fds;
 	time_t start_time, current_time;
 	unsigned int selfchk;
+	unsigned int safereload = 0;
 	threadpool_t *thr_pool;
 
 #if defined(FANOTIFY) || defined(CLAMAUTH)
@@ -1065,6 +1067,13 @@
 	logg("Self checking every %u seconds.\n", selfchk);
     }
 
+    if(optget(opts, "SafeReload")->enabled) {
+	if(optget(opts, "ReloadEvent")->enabled) {
+	    safereload = 1;
+	} else {
+	    logg("SafeReload disabled: must set 'ReloadEvent' in clamd.conf to enable.\n");
+	}
+    }
     /* save the PID */
     mainpid = getpid();
     if((opt = optget(opts, "PidFile"))->enabled) {
@@ -1430,10 +1439,17 @@
 
 	    engine = reload_db(engine, dboptions, opts, FALSE, &ret);
 	    if(ret) {
-		logg("Terminating because of a fatal error.\n");
-		if(new_sd >= 0)
-		    closesocket(new_sd);
-		break;
+		if(!safereload) {
+		    logg("Terminating because of a fatal error.\n");
+		    if(new_sd >= 0)
+			closesocket(new_sd);
+		    break;
+		} else {
+		    logg("!continuing to use old databse.\n");
+		    reloadaction( "FAIL", engine, opts );
+		}
+	    } else {
+		reloadaction( "SUCCESS", engine, opts );
 	    }
 
 	    pthread_mutex_lock(&reload_mutex);
Only in clamav-0.99um1/clamd: server-th.c.orig
diff -aur clamav-0.99/shared/optparser.c clamav-0.99um1/shared/optparser.c
--- clamav-0.99/shared/optparser.c	2015-11-23 18:13:46.000000000 -0500
+++ clamav-0.99um1/shared/optparser.c	2015-12-17 15:58:04.000000000 -0500
@@ -268,6 +268,10 @@
 
     { "SelfCheck", NULL, 0, CLOPT_TYPE_NUMBER, MATCH_NUMBER, 600, NULL, 0, OPT_CLAMD, "This option specifies the time intervals (in seconds) in which clamd\nshould perform a database check.", "600" },
 
+    { "SafeReload", NULL, 0, CLOPT_TYPE_BOOL, MATCH_BOOL, 0, NULL, 0, OPT_CLAMD, "Continue to run using the old database after a failed database reload. The default behavior is to stop the daemon on a failed reload. This option can only be turned on if 'ReloadEvent' is set.", "no" },
+
+    { "ReloadEvent", NULL, 0, CLOPT_TYPE_STRING, NULL, -1, NULL, 0, OPT_CLAMD, "Execute a command when the signatures database is reloaded. In the command string %v will be replaced with 'SUCCESS' or 'FAIL' dependent on the success of the reload. The environment variable $CLAM_RELOADEVENT_DBVERSION will be set.", "/usr/bin/mailx -s \"ClamAV Signatures Database Reload: %v\" alert < /dev/null" },
+
     { "DisableCache", "disable-cache", 0, CLOPT_TYPE_BOOL, MATCH_BOOL, 0, NULL, 0, OPT_CLAMD | OPT_CLAMSCAN, "This option allows you to disable clamd's caching feature.", "no" },
 
     { "VirusEvent", NULL, 0, CLOPT_TYPE_STRING, NULL, -1, NULL, 0, OPT_CLAMD, "Execute a command when a virus is found. In the command string %v will be\nreplaced with the virus name. Additionally, two environment variables will\nbe defined: $CLAM_VIRUSEVENT_FILENAME and $CLAM_VIRUSEVENT_VIRUSNAME.", "/usr/bin/mailx -s \"ClamAV VIRUS ALERT: %v\" alert < /dev/null" },
Only in clamav-0.99um1/shared: optparser.c.orig
