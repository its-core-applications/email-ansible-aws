#!/bin/bash

name=redis-remove

if [[ $# -ne 1 ]]; then
    echo "Usage: $0 <host>" >&2
    exit 1
fi

outlog() {
    logger -p user.info -t "$name[$$]" "$1"
    echo "$1"
}

try=0
pong=0
while [[ $pong -eq 0 ]]; do
    (( try++ ))
    if [[ $(redis-cli -h $1 PING) = 'PONG' ]]; then
        pong=1
    else
        if [[ $try -gt 2 ]]; then
            outlog "No PONG from $1, assuming it's already removed."
            exit 0
        fi
        outlog "PING failed, retrying..."
        sleep 1
    fi
done

tmpfile=$(mktemp /tmp/${name}.XXXXXXXX)
redis-cli -h $1 CLUSTER NODES > $tmpfile

myid=$(grep myself $tmpfile | awk '{print $1}')

if [[ $(awk '$9 && $3 == "myself,master"' $tmpfile) ]]; then
    # Grab the first replica
    replica=$(sed -n -e "/slave $myid/{s/:.*//;s/.* //;p;q}" $tmpfile)
    try=0
    while [[ -z $replica && $try -lt 3 ]]; do
        outlog "No current replica, choosing a random replica to steal..."
        (( try++ ))
        replica=$(sed -n -e "/slave /{s/:.*//;s/.* //;p}" $tmpfile | shuf -n1)
        if [[ -z $replica ]]; then
            outlog "No replicas available to steal!" >&2
            sleep 5
            redis-cli -h $1 CLUSTER NODES > $tmpfile
        else
            outlog "Making $replica into a replica of $1"
            redis-cli -h $replica CLUSTER REPLICATE $myid
            itry=0
            until grep -q "slave $myid" $tmpfile || [[ $itry -gt 30 ]]; do
                [[ $(( itry % 5 )) -eq 0 ]] && outlog "Waiting for $replica to replicate ${1}..."
                (( itry++ ))
                sleep 1
                redis-cli -h $1 CLUSTER NODES > $tmpfile
            done
        fi
        # Maybe we have a replica now
        replica=$(sed -n -e "/slave $myid/{s/:.*//;s/.* //;p;q}" $tmpfile)
    done
    if [[ $replica ]]; then
        outlog "Promoting $replica to master"
        try=0
        res=$(redis-cli -h $replica CLUSTER FAILOVER)
        until [[ $res = 'OK' ]]; do
            [[ $(( try % 5 )) -eq 0 ]] && outlog "Waiting for $replica to accept the failover command instead of saying ${res}..."
            if [[ $(( try++ )) -gt 30 ]]; then
                outlog "Giving up on failover!" >&2
                exit 1
            fi
            res=$(redis-cli -h $replica CLUSTER FAILOVER)
        done
    fi

    try=0
    until grep -q myself,slave $tmpfile; do
        [[ $(( try % 5 )) -eq 0 ]] && outlog "Waiting for $1 to stop being a master..."
        if [[ $(( try++ )) -gt 30 ]]; then
            outlog "$1 is still a master, we can't remove it!" >&2
            rm -f $tmpfile
            exit 1
        fi
        sleep 1
        redis-cli -h $1 CLUSTER NODES > $tmpfile
    done
fi


try=0
while grep -q "slave $myid" $tmpfile; do
    [[ $(( try % 5 )) -eq 0 ]] && outlog "Waiting for $1 to stop having replicas..."
    if [[ $(( try++ )) -gt 30 ]]; then
        outlog "$1 still has replicas, we can't remove it!" >&2
        rm -f $tmpfile
        exit 1
    fi
    sleep 1
    redis-cli -h $1 CLUSTER NODES > $tmpfile
done

outlog "Shutting down $1"
redis-cli -h $1 CONFIG SET appendonly no
redis-cli -h $1 SHUTDOWN NOSAVE
sleep 5
outlog "Forgetting $1..."
for rhost in $(sed -n -e 's/:.*//;s/.* //;p' $tmpfile); do
    [[ $rhost != $1 ]] && redis-cli -h $rhost CLUSTER FORGET $myid &>/dev/null
done

rm -f $tmpfile
