#!/usr/bin/env python
import json
import boto3
import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-r', '--region', help='AWS region')
target_parser = parser.add_mutually_exclusive_group(required=True)
target_parser.add_argument('-a', '--arn', help='SNS ARN')
target_parser.add_argument('-t', '--topic', help='SNS topic name')
parser.add_argument('-d', '--datacenter', help='datacenter that this alert is from')
args = parser.parse_args()

region = args.region or 'us-west-2'
dc = args.datacenter or 'prod/' + region

boto3.setup_default_session(profile_name='snspublish')
client = boto3.client('sns', region_name=region)

if args.arn:
    arn = args.arn
else:
    topics = client.list_topics()
    for t in topics['Topics']:
        if t['TopicArn'].endswith(':' + args.topic):
            arn = t['TopicArn']

event = json.load(sys.stdin)

if event['check']['status'] == 0:
    status = 'OK'
elif event['check']['status'] == 1:
    status = 'WARNING'
elif event['check']['status'] == 2:
    status = 'CRITICAL'
else:
    status = 'UNKNOWN'

subject = '{0} - {1} - {2}/{3} {4}'.format(dc, 'ALERT' if event['action'] == 'create' else 'RESOLVED', event['client']['name'], event['check']['name'], status)
msg = {
    'default': event['check']['output'],
    'sms': '{0} - {1}'.format(subject, event['check']['output'].split("\n")[0]),
}

response = client.publish(TopicArn = arn, Message = json.dumps(msg), MessageStructure = 'json', Subject = subject)

