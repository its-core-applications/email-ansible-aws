---

- hosts: Class_mx:&Status_production
  serial: 1
  gather_facts: false
  tasks:
    - name: Set status on oldest hosts to spindown
      delegate_to: localhost
      become: false
      ec2_tag:
        region: "{{ region }}"
        profile: "{{ aws_profile_ec2 }}"
        resource: "{{ instance_id }}"
        tags:
          Status: spindown
      when:
        - region == aws_region
        - (production_count | int) > (target_min | int)
        - (production_count_az | int) > 1
        - (spindown_count | int) < (target_spindown | int)
        - (spindown_count_az | int) < (target_spindown_az | int)
        - launch_time in ((groups.Class_mx | intersect(groups['az_' ~ placement.availability_zone | replace('-', '_')]) | map('extract', hostvars, 'launch_time') | sort)[:(target_spindown_az | int)])
      vars:
        target_min: "{{ aws_instance_counts[aws_status].mx }}"
        target_spindown: 3
        # This is a tangled web, but it makes the conditionals more readable
        # (modulo the lack of native type propagation in templated vars). We
        # use '|int' on target* as well, in case they were passed on the CLI
        # as k=v extra-vars to override the default.
        target_spindown_az: "{{ ((target_spindown | int) / (groups.Class_mx | map('extract', hostvars, 'placement') | map(attribute='availability_zone') | unique | length)) | round(0, 'ceil') }}"
        spindown_count: "{{ groups.Class_mx | intersect(aws_region_group) | intersect(groups.Status_spindown) | length }}"
        spindown_count_az: "{{ groups.Class_mx | intersect(groups.Status_spindown) | intersect(groups['az_' ~ placement.availability_zone | replace('-', '_')]) | length }}"
        production_count: "{{ groups.Class_mx | intersect(groups.Status_production) | intersect(aws_region_group) | length }}"
        production_count_az: "{{ groups.Class_mx | intersect(groups.Status_production) | intersect(groups['az_' ~ placement.availability_zone | replace('-', '_')]) | length }}"
      register: result

    - meta: refresh_inventory

- hosts: Class_mx:&Status_spindown
  tasks:
    - when: region == aws_region
      block:
        - name: Remove from loadbalancer
          delegate_to: localhost
          become: false
          ec2_elb:
            region: "{{ region }}"
            instance_id: "{{ instance_id }}"
            state: absent

        - name: Stop sensu
          systemd:
            name: sensu-client
            state: stopped
          ignore_errors: true

        - name: Wait for active connections to finish
          wait_for:
            host: 0.0.0.0
            port: 25
            state: drained

- hosts: Class_mx:&Status_spindown
  serial: 1
  tasks:
    - when: region == aws_region
      block:
        - import_tasks: task_spindown_redis.yml

- hosts: Class_mx:&Status_spindown
  tasks:
    - when: region == aws_region
      block:
        - name: Give the queue a chance to quiesce
          pause: seconds=60

        - import_tasks: task_spindown_simta.yml

        - name: Set status to spundown
          delegate_to: localhost
          become: false
          ec2_tag:
            region: "{{ region }}"
            profile: "{{ aws_profile_ec2 }}"
            resource: "{{ instance_id }}"
            tags:
              Status: spundown

