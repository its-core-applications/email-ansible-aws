---

- hosts: tag_Class_mx:&tag_Status_production
  serial: 1
  gather_facts: false
  tasks:
    - name: Set status on oldest hosts to spindown
      ec2_tag:
        region: "{{ aws_region }}"
        resource: "{{ ec2_id }}"
        tags:
          Status: spindown
      when:
        - (production_count | int) > (target_min | int)
        - (production_count_az | int) > 1
        - (spindown_count | int) < (target_spindown | int)
        - (spindown_count_az | int) < (target_spindown_az | int)
        - ec2_launch_time in ((groups.tag_Class_mx | intersect(groups[ec2_placement]) | map('extract', hostvars, 'ec2_launch_time') | sort)[:(target_spindown_az | int)])
      vars:
        target_min: 6
        target_spindown: 3
        # This is a tangled web, but it makes the conditionals more readable
        # (modulo the lack of native type propagation in templated vars). We
        # use '|int' on target* as well, in case they were passed on the CLI
        # as k=v extra-vars to override the default.
        target_spindown_az: "{{ ((target_spindown | int) / (groups.tag_Class_mx | map('extract', hostvars, 'ec2_placement') | unique | length)) | round(0, 'ceil') }}"
        spindown_count: "{{ groups.tag_Class_mx | intersect(groups.tag_Status_spindown | default([])) | length }}"
        spindown_count_az: "{{ groups.tag_Class_mx | intersect(groups.tag_Status_spindown | default([])) | intersect(groups[ec2_placement]) | length }}"
        production_count: "{{ groups.tag_Class_mx | intersect(groups.tag_Status_production | default([])) | length }}"
        production_count_az: "{{ groups.tag_Class_mx | intersect(groups.tag_Status_production | default([])) | intersect(groups[ec2_placement]) | length }}"
      register: result

    - meta: refresh_inventory
      when: result is changed

- hosts: tag_Class_mx:&tag_Status_spindown
  tasks:
    - name: Remove from loadbalancer
      delegate_to: localhost
      become: false
      ec2_elb:
        region: "{{ aws_region }}"
        instance_id: "{{ ec2_id }}"
        state: absent

    - name: Stop sensu
      systemd:
        name: sensu-client
        state: stopped
      ignore_errors: true

    - name: Wait for active connections to finish
      wait_for:
        host: 0.0.0.0
        port: 25
        state: drained

- hosts: tag_Class_mx:&tag_Status_spindown
  serial: 1
  tasks:
    - import_tasks: task_spindown_redis.yml

- hosts: tag_Class_mx:&tag_Status_spindown
  tasks:
    - name: Give the queue a chance to quiesce
      pause: seconds=60

    - import_tasks: task_spindown_simta.yml

    - name: Set status to spundown
      ec2_tag:
        region: "{{ aws_region }}"
        resource: "{{ ec2_id }}"
        tags:
          Status: spundown
