#!/bin/bash

# packer needs to be run with a specific working directory
cd $(readlink -fn $(dirname "$BASH_SOURCE"))

if [[ $1 ]]; then
    class=$1
else
    class=base
fi

if [[ ! -f ansible/${class}.yml ]]; then
    echo "ansible/${class}.yml doesn't exist, aborting"
    exit 1
fi

if [[ $class = 'vdc_relay' ]]; then
    export AWS_PROFILE=$(ANSIBLE_STDOUT_CALLBACK=json ansible --playbook-dir ansible localhost -m debug -a 'msg={{ aws_profiles[aws_status]["vdc-core"] }}' | jq -r .plays[0].tasks[0].hosts.localhost.msg)
else
    export AWS_PROFILE=$(ANSIBLE_STDOUT_CALLBACK=json ansible localhost --playbook-dir ansible -m debug -a 'msg={{ aws_profile }}' | jq -r .plays[0].tasks[0].hosts.localhost.msg)
fi

if [[ $2 ]]; then
    os=$2
else
    os=amzn2
fi

echo "Building $class image for $os"

case $os in
    centos7)
        owner='679593333241'
        filter='Name=product-code,Values=aw0evgkw8e5c1q413zgy5pjce'
        root='/dev/sda1'
    ;;
    rhel7)
        owner='309956199498'
        filter='Name=name,Values=RHEL-7.?_HVM_GA*'
        root='/dev/sda1'
    ;;
    *)
        owner='137112412989'
        filter='Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2'
        root='/dev/xvda'
    ;;
esac

if [[ $class = 'base' ]] || [[ $class = 'vdc_relay' ]]; then
    base=$(aws ec2 describe-images --filters "Name=owner-id,Values=$owner" 'Name=state,Values=available' "$filter")
else
    base=$(aws ec2 describe-images --owners self --filters 'Name=state,Values=available' 'Name=tag:image_type,Values=base' "Name=tag:os,Values=$os")
fi

base=$(echo "$base" | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId')

subnet_id=$(aws ec2 describe-subnets --filters 'Name=tag:Class,Values=public' | jq -r '.Subnets[].SubnetId' | shuf | head -n 1)

packer build -var "aws_region=$AWS_DEFAULT_REGION" -var "image_os=$os" -var "image_type=$class" -var "base_ami=$base" -var "root_device=$root" -var "subnet_id=$subnet_id" packer/template.pkr.hcl
